$PBExportHeader$f_creation_epl_dw.srf
$PBExportComments$bom 전개 ( DW ) -- 하위전개
global type f_creation_epl_dw from function_object
end type

forward prototypes
global function integer f_creation_epl_dw (string a_itno, string a_dlt)
end prototypes

global function integer f_creation_epl_dw (string a_itno, string a_dlt);string 		ls_pitno,ls_citno,ls_itno[50,500],ls_serial[50,500],ls_serial1
string 		ls_edtm,ls_edte,MySql,ls_level,ls_ecnnumber,ls_drawing
integer 		i,j,k,p,ln_cnt,ln_serial,ln_count,II,ln_retrieve_count
decimal{3} 	ln_qty,ln_qtym[50,500],ln_qty1
datastore 	ld_dw

ld_dw 				= 	create datastore
ld_Dw.dataobject 	= 	'd_epl_export_01'
ld_Dw.settransobject(sqlca)
f_sysdate()

// A_DLT = 'Y' 현재 EPL TEMP DB의 내용을 CLEAR 후 새롭게 CREATION
select 	count(*) into :ln_count from qtemp.epltemp 
	where tmodl = :a_itno
using sqlca ; 
if sqlca.sqlcode <> 0 then
	Mysql =  " CREATE TABLE QTEMP.EPLTEMP ( TMODL CHAR(15) NOT NULL, TSERL CHAR(60) NOT NULL, TLEVEL CHAR(2) NOT NULL, TPITN CHAR(15) NOT NULL, " + & 
				" TCITN CHAR(15) NOT NULL, TQTYM NUMERIC(8,3) NOT NULL, TQTY1 NUMERIC(8,3) NOT NULL," + & 
				" TEDTM CHAR(8) NOT NULL, TEDTE CHAR(8) NOT NULL, TECNNUMBER CHAR(15) NOT NULL,TDRAWING CHAR(16) NOT NULL ) " 
	Execute Immediate :mysql ;
else
	if a_dlt = 'Y' then
		delete from qtemp.epltemp 
		using sqlca ;
	elseif ln_count <> 0 then
		return 	ln_count
	end if
end if
k = 0 
p = 0
ls_pitno       		=	trim(a_itno)
ln_retrieve_count 	= 	ld_dw.retrieve(ls_pitno,g_s_date)

INSERT INTO QTEMP.epltemp 
	VALUES (	:a_itno ,'000','0',:ls_pitno,:ls_pitno,1,1,
					'','','',''	) 
	using sqlca ;

for II = 1 to ln_retrieve_count
	ls_citno   		= 	ld_Dw.getitemstring(II,"childitem")
	ls_edtm    		= 	ld_Dw.getitemstring(II,"startdate")
	ls_edte    		= 	ld_Dw.getitemstring(II,"enddate")
	ln_qty     		= 	ld_Dw.getitemnumber(II,"eqty")
	ls_ecnnumber	=	ld_Dw.getitemstring(II,"ecnnumber")
	ls_drawing		=	ld_Dw.getitemstring(II,"drawingnumber")	
	i = 1
	k++
	ln_serial++
	ls_itno[1,k]   	= 	trim(ls_citno)
	ln_qtym[1,k]   	= 	ln_qty
	ls_serial[1,k] 	= 	string(ln_Serial,"000")
	ls_serial1     	= 	string(ln_Serial,"000")
	ln_count++
	INSERT INTO QTEMP.epltemp 
	VALUES (	:a_itno ,:ls_serial1,'1',:ls_pitno,:ls_citno,:ln_qty,:ln_qty,
					:ls_edtm,:ls_edte,:ls_ecnnumber,:ls_drawing	) 
	using sqlca ;
next
  
for i = 1 to 50
  for j = 1 to k
		ls_pitno = ls_itno[i,j]
		ln_retrieve_count = ld_dw.retrieve(ls_pitno,g_s_date)
		for II = 1 to ln_retrieve_count
			ls_citno   		= 	ld_Dw.getitemstring(II,"childitem")
			ls_edtm    		= 	ld_Dw.getitemstring(II,"startdate")
			ls_edte    		= 	ld_Dw.getitemstring(II,"enddate")
			ln_qty     		= 	ld_Dw.getitemnumber(II,"eqty")
			ls_ecnnumber	=	ld_Dw.getitemstring(II,"ecnnumber")
			ls_drawing		=	ld_Dw.getitemstring(II,"drawingnumber")	
			p++ 
			ln_serial++
			ls_itno[i+1,p]   		=	trim(ls_citno)
			ln_qtym[i+1,p]   	= 	ln_qty * ln_qtym[i,j]
			ln_qty1          		= 	ln_qty * ln_qtym[i,j]
			ls_serial[i+1,p] 		= 	ls_serial[i,j] + string(ln_Serial,"000")
			ls_serial1       		= 	ls_serial[i,j] + string(ln_Serial,"000")
			ls_level         		= 	string(i+1)
			ln_count++
			INSERT INTO QTEMP.epltemp 
			VALUES (	:a_itno,:ls_serial1,:ls_level,:ls_pitno,:ls_citno,:ln_qty,:ln_qty1,
							:ls_edtm,:ls_edte,:ls_ecnnumber,:ls_drawing	)
					  
			using sqlca;
		next
  next 
  if	p = 0 then
	exit	
  end if
  k = p
  p = 0
next
return	ln_count
 
end function

