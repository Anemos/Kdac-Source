$PBExportHeader$f_pism_calcsuppresttime.srf
$PBExportComments$법정 휴게시간 계산(지원분)
global type f_pism_calcsuppresttime from function_object
end type

forward prototypes
global function integer f_pism_calcsuppresttime (string as_area, string as_div, string as_wc, string as_wday, ref integer ri_nresttime, ref integer ri_eresttime)
end prototypes

global function integer f_pism_calcsuppresttime (string as_area, string as_div, string as_wc, string as_wday, ref integer ri_nresttime, ref integer ri_eresttime);//////////////// 지원공수(From ~ To)에 대한 휴게시간 계산 

String ls_wday, ls_EmpNo, ls_DNgbn, ls_suppGubun[], ls_suppGbn 
DateTime ldt_dayFromTime, ldt_dayToTime, ldt_nightFromTime, ldt_nightToTime, ldt_suppFromTime, ldt_suppToTime, &
			ldt_suppdayFrom, ldt_suppdayTo, ldt_suppnightFrom, ldt_suppnightTo //, ldt_etcFromTime, ldt_etcToTime
DateTime ldt_suppFrom[], ldt_suppTo[], ldt_restFromTime, ldt_restToTime, ldt_Null  // ldt_etcFromTime[], ldt_etcToTime[],
			 
Integer I, li_suppCnt, li_restTime, li_calcRestTime, li_calcEtcRestTime, li_nRestTime, li_eRestTime, &
		  li_retnRestTime, li_reteRestTime 
str_pism_supp lstr_supp[] 

SetNull(ldt_NULL) 

ls_wday = as_wday 
ldt_dayFromTime = DateTime(Date(ls_wday), Time('08:00'))
ldt_dayToTime 	= DateTime(Date(ls_wday), Time('17:00'))

ldt_nightFromTime = DateTime(Date(ls_wday), Time('23:00'))
ldt_nightToTime   = DateTime(RelativeDate(Date(ls_wday), 1), Time('08:00'))

// 지원받음 
 DECLARE suppMHList1 CURSOR FOR  
 SELECT EmpNo, supGubun, FromTime, ToTime 
   FROM TMHSUPPORT 
  WHERE ( AreaCode = :as_area ) and 
		  ( DivisionCode = :as_div ) and
		  ( SupWorkcenter = :as_wc ) and 
		  ( WorkDay = :as_wday ) And 
		  ( supGubun = '1' Or supGubun = '4' ) Using SqlPIS ;
	OPEN suppMHList1 ;
	FETCH suppMHList1 INTO :ls_EmpNo, :ls_suppGbn, :ldt_suppFromTime, :ldt_suppToTime ;
	Do WHILE SqlPIS.Sqlcode = 0 
		li_suppCnt++

		If ldt_suppFromTime >= ldt_dayFromTime And &
			ldt_suppFromTime <= ldt_dayToTime Then	// 지원From시각이 08:00 ~ 17:00 
			If ldt_suppToTime <= ldt_dayToTime Then  // 지원To시각이 17:00 이전 
				lstr_supp[li_suppCnt].supGubun = '+'
				lstr_supp[li_suppCnt].empGubun = ls_suppGbn 
				lstr_supp[li_suppCnt].dnGubun = 'D' 
				lstr_supp[li_suppCnt].FromTime = ldt_suppFromTime; lstr_supp[li_suppCnt].ToTime = ldt_suppToTime 
				lstr_supp[li_suppCnt].escFromTime = ldt_Null; lstr_supp[li_suppCnt].escToTime = ldt_Null 
				
			ElseIf ldt_suppToTime >= ldt_dayToTime And &
					 ldt_suppToTime <= ldt_nightFromTime Then	// 지원To시각이 17:00 ~ 23:00 

				lstr_supp[li_suppCnt].supGubun = '+'
				lstr_supp[li_suppCnt].empGubun = ls_suppGbn 
				lstr_supp[li_suppCnt].dnGubun = 'D' 
				lstr_supp[li_suppCnt].escFromTime = ldt_dayToTime; lstr_supp[li_suppCnt].escToTime = ldt_suppToTime 
				lstr_supp[li_suppCnt].FromTime = ldt_suppFromTime; lstr_supp[li_suppCnt].ToTime = ldt_dayToTime 

			ElseIf ldt_suppToTime >= ldt_nightFromTime And &
					 ldt_suppToTime <= ldt_nightToTime Then // 지원To시각이 23:00 ~ 08:00 

				lstr_supp[li_suppCnt].supGubun = '+'
				lstr_supp[li_suppCnt].empGubun = ls_suppGbn 
				lstr_supp[li_suppCnt].dnGubun = 'D' 
				lstr_supp[li_suppCnt].escFromTime = ldt_dayToTime; lstr_supp[li_suppCnt].escToTime = ldt_nightFromTime 
				lstr_supp[li_suppCnt].FromTime = ldt_suppFromTime; lstr_supp[li_suppCnt].ToTime = ldt_dayToTime 

				li_suppCnt++		

				lstr_supp[li_suppCnt].supGubun = '+'
				lstr_supp[li_suppCnt].empGubun = ls_suppGbn 
				lstr_supp[li_suppCnt].dnGubun = 'N' 
				lstr_supp[li_suppCnt].FromTime = ldt_nightFromTime; lstr_supp[li_suppCnt].ToTime = ldt_suppToTime 
				lstr_supp[li_suppCnt].escFromTime = ldt_Null; lstr_supp[li_suppCnt].escToTime = ldt_Null 

			Else // 지원To시각이 주간 08:00 이후 -> 입력불가!! 
			End If 
		ElseIf ldt_suppFromTime >= ldt_dayToTime And &
				 ldt_suppFromTime <= ldt_nightFromTime Then // 지원From시각이 17:00 ~ 23:00 
				If ldt_suppToTime >= ldt_dayToTime And &
					 ldt_suppToTime <= ldt_nightFromTime Then	// 지원To시각이 17:00 ~ 23:00 
					 
					 lstr_supp[li_suppCnt].supGubun = '+'
					 lstr_supp[li_suppCnt].empGubun = ls_suppGbn 
					 lstr_supp[li_suppCnt].dnGubun = 'X' 
					 lstr_supp[li_suppCnt].FromTime = ldt_Null; lstr_supp[li_suppCnt].ToTime = ldt_Null 
					 lstr_supp[li_suppCnt].escFromTime = ldt_suppFromTime; lstr_supp[li_suppCnt].escToTime = ldt_suppToTime 

				ElseIf ldt_suppToTime >= ldt_nightFromTime And &
						 ldt_suppToTime <= ldt_nightToTime Then // 지원To시각이 23:00 ~ 08:00 
					
					lstr_supp[li_suppCnt].supGubun = '+'
					lstr_supp[li_suppCnt].empGubun = ls_suppGbn 
					lstr_supp[li_suppCnt].dnGubun = 'N' 
					lstr_supp[li_suppCnt].FromTime = ldt_nightFromTime; lstr_supp[li_suppCnt].ToTime = ldt_suppToTime 
					lstr_supp[li_suppCnt].escFromTime = ldt_suppFromTime; lstr_supp[li_suppCnt].escToTime = ldt_nightFromTime 

				Else // 지원To시각이 주간 08:00 이후 -> 입력불가!! 
				End If 
		ElseIf ldt_suppFromTime >= ldt_nightFromTime And & 
				 ldt_suppFromTime <= ldt_nightToTime Then // 지원From시각이 23:00 ~ 08:00 
				If ldt_suppToTime >= ldt_nightFromTime And &
				   ldt_suppToTime <= ldt_nightToTime Then // 지원To시각이 23:00 ~ 08:00 
					
				 lstr_supp[li_suppCnt].supGubun = '+'
				 lstr_supp[li_suppCnt].empGubun = ls_suppGbn 
				 lstr_supp[li_suppCnt].dnGubun = 'N' 
				 lstr_supp[li_suppCnt].FromTime = ldt_suppFromTime; lstr_supp[li_suppCnt].ToTime = ldt_suppToTime 
				 lstr_supp[li_suppCnt].escFromTime = ldt_Null; lstr_supp[li_suppCnt].escToTime = ldt_Null 

				Else // 지원To시각이 주간 08:00 이후 -> 입력불가!! 
				End If 
		End If
		
		FETCH suppMHList1 INTO :ls_EmpNo, :ls_suppGbn, :ldt_suppFromTime, :ldt_suppToTime ;
	Loop 
	Close suppMHList1 ;
	
//////////////////////////////////////////////////////////////////////////////////////////////	
// 지원해줌 
	
 DECLARE suppMHList2 CURSOR FOR  
 SELECT EmpNo, supGubun, FromTime, ToTime 
   FROM TMHSUPPORT 
  WHERE ( AreaCode = :as_area ) and 
		  ( DivisionCode = :as_div ) and
		  ( Workcenter = :as_wc ) and 
		  ( WorkDay = :as_wday ) Using SqlPIS ;
//		  ( supGubun = '1' Or supGubun = '4' ) 
	OPEN suppMHList2 ;
	FETCH suppMHList2 INTO :ls_EmpNo, :ls_suppGbn, :ldt_suppFromTime, :ldt_suppToTime ;
	Do WHILE SqlPIS.Sqlcode = 0 
		li_suppCnt++

		If ldt_suppFromTime >= ldt_dayFromTime And &
			ldt_suppFromTime <= ldt_dayToTime Then	// 지원From시각이 08:00 ~ 17:00 
			If ldt_suppToTime <= ldt_dayToTime Then  // 지원To시각이 17:00 이전 
				lstr_supp[li_suppCnt].supGubun = '-'
				lstr_supp[li_suppCnt].empGubun = ls_suppGbn 
				lstr_supp[li_suppCnt].dnGubun = 'D' 
				lstr_supp[li_suppCnt].FromTime = ldt_suppFromTime; lstr_supp[li_suppCnt].ToTime = ldt_suppToTime 
				lstr_supp[li_suppCnt].escFromTime = ldt_Null; lstr_supp[li_suppCnt].escToTime = ldt_Null 
				
			ElseIf ldt_suppToTime >= ldt_dayToTime And &
					 ldt_suppToTime <= ldt_nightFromTime Then	// 지원To시각이 17:00 ~ 23:00 

				lstr_supp[li_suppCnt].supGubun = '-'
				lstr_supp[li_suppCnt].empGubun = ls_suppGbn 
				lstr_supp[li_suppCnt].dnGubun = 'D' 
				lstr_supp[li_suppCnt].escFromTime = ldt_dayToTime; lstr_supp[li_suppCnt].escToTime = ldt_suppToTime 
				lstr_supp[li_suppCnt].FromTime = ldt_suppFromTime; lstr_supp[li_suppCnt].ToTime = ldt_dayToTime 

			ElseIf ldt_suppToTime >= ldt_nightFromTime And &
					 ldt_suppToTime <= ldt_nightToTime Then // 지원To시각이 23:00 ~ 08:00 

				lstr_supp[li_suppCnt].supGubun = '-'
				lstr_supp[li_suppCnt].empGubun = ls_suppGbn 
				lstr_supp[li_suppCnt].dnGubun = 'D' 
				lstr_supp[li_suppCnt].escFromTime = ldt_dayToTime; lstr_supp[li_suppCnt].escToTime = ldt_nightFromTime 
				lstr_supp[li_suppCnt].FromTime = ldt_suppFromTime; lstr_supp[li_suppCnt].ToTime = ldt_dayToTime 

				li_suppCnt++		

				lstr_supp[li_suppCnt].supGubun = '-'
				lstr_supp[li_suppCnt].empGubun = ls_suppGbn 
				lstr_supp[li_suppCnt].dnGubun = 'N' 
				lstr_supp[li_suppCnt].FromTime = ldt_nightFromTime; lstr_supp[li_suppCnt].ToTime = ldt_suppToTime 
				lstr_supp[li_suppCnt].escFromTime = ldt_Null; lstr_supp[li_suppCnt].escToTime = ldt_Null 

			Else // 지원To시각이 주간 08:00 이후 -> 입력불가!! 
			End If 
		ElseIf ldt_suppFromTime >= ldt_dayToTime And &
				 ldt_suppFromTime <= ldt_nightFromTime Then // 지원From시각이 17:00 ~ 23:00 
				If ldt_suppToTime >= ldt_dayToTime And &
					 ldt_suppToTime <= ldt_nightFromTime Then	// 지원To시각이 17:00 ~ 23:00 
					 
					 lstr_supp[li_suppCnt].supGubun = '-'
					 lstr_supp[li_suppCnt].empGubun = ls_suppGbn 
					 lstr_supp[li_suppCnt].dnGubun = 'X' 
					 lstr_supp[li_suppCnt].FromTime = ldt_Null; lstr_supp[li_suppCnt].ToTime = ldt_Null 
					 lstr_supp[li_suppCnt].escFromTime = ldt_suppFromTime; lstr_supp[li_suppCnt].escToTime = ldt_suppToTime 

				ElseIf ldt_suppToTime >= ldt_nightFromTime And &
						 ldt_suppToTime <= ldt_nightToTime Then // 지원To시각이 23:00 ~ 08:00 
					
					lstr_supp[li_suppCnt].supGubun = '-'
					lstr_supp[li_suppCnt].empGubun = ls_suppGbn 
					lstr_supp[li_suppCnt].dnGubun = 'N' 
					lstr_supp[li_suppCnt].FromTime = ldt_nightFromTime; lstr_supp[li_suppCnt].ToTime = ldt_suppToTime 
					lstr_supp[li_suppCnt].escFromTime = ldt_suppFromTime; lstr_supp[li_suppCnt].escToTime = ldt_nightFromTime 

				Else // 지원To시각이 주간 08:00 이후 -> 입력불가!! 
				End If 
		ElseIf ldt_suppFromTime >= ldt_nightFromTime And & 
				 ldt_suppFromTime <= ldt_nightToTime Then // 지원From시각이 23:00 ~ 08:00 
				If ldt_suppToTime >= ldt_nightFromTime And &
				   ldt_suppToTime <= ldt_nightToTime Then // 지원To시각이 23:00 ~ 08:00 
					
				 lstr_supp[li_suppCnt].supGubun = '-'
				 lstr_supp[li_suppCnt].empGubun = ls_suppGbn 
				 lstr_supp[li_suppCnt].dnGubun = 'N' 
				 lstr_supp[li_suppCnt].FromTime = ldt_suppFromTime; lstr_supp[li_suppCnt].ToTime = ldt_suppToTime 
				 lstr_supp[li_suppCnt].escFromTime = ldt_Null; lstr_supp[li_suppCnt].escToTime = ldt_Null 

				Else // 지원To시각이 주간 08:00 이후 -> 입력불가!! 
				End If 
		End If
		
		FETCH suppMHList2 INTO :ls_EmpNo, :ls_suppGbn, :ldt_suppFromTime, :ldt_suppToTime ;
	Loop 
	Close suppMHList2 ;

//////////////////////////////////////////////////////////////////////////////////////////////	
DateTime  escFromTime, escToTime, restFromTime, restToTime 
Integer calcRestTime, restTime 
String ls_tmorrow 

ls_tmorrow = String(RelativeDate( Date(as_wday), 1 ), "YYYY.MM.DD")

DECLARE restTimeList CURSOR FOR 
  SELECT Cast( :as_wday + ' ' + dayFrom as DateTime ) as restFrom,   
			Cast( :as_wday + ' ' + dayTo as DateTime) as restTo,
			dayRestTime as restTime 
	 FROM TMHRESTTIME  
	WHERE ( AreaCode = :as_area ) AND  
			( DivisionCode = :as_div ) AND  
			( substring(restGubun, 1, 1) = 'R' ) AND  
			( ApplyMonth = substring(:as_wday, 6, 2) )   
Union 
  SELECT Cast( Case When restGubun = 'R3' Then :as_wday Else :ls_tmorrow End + ' ' + nightFrom as DateTime ),   
			Cast( Case When restGubun = 'R3' Then :as_wday Else :ls_tmorrow End + ' ' + nightTo as DateTime ),
			nightRestTime 
	 FROM TMHRESTTIME  
	WHERE ( AreaCode = :as_area ) AND  
			( DivisionCode = :as_div ) AND  
			( substring(restGubun, 1, 1) = 'R' ) AND  
			( ApplyMonth = substring(:as_wday, 6, 2) ) Using SqlPIS ; 
OPEN restTimeList ;
FETCH restTimeList INTO :ldt_restFromTime, :ldt_restToTime, :li_restTime ;
Do WHILE SqlPIS.Sqlcode = 0 
	For I = 1 To li_suppCnt 
		If lstr_supp[I].supGubun = '-' Then li_restTime = 0 - abs(li_restTime) 
		// 정시 
		If lstr_supp[I].FromTime <= ldt_restFromTime And & 
			lstr_supp[I].ToTime >= ldt_restToTime Then 
			li_calcRestTime = li_calcRestTime + li_restTime 
			
			If lstr_supp[I].empGubun <> '2' Then li_nRestTime += li_restTime 
			If lstr_supp[I].empGubun = '2' Then li_eRestTime += li_restTime 
		End If
		// 정시외
		If lstr_supp[I].escFromTime <= ldt_restFromTime And & 
			lstr_supp[I].escToTime >= ldt_restToTime Then 
			li_calcEtcRestTime = li_calcEtcRestTime + li_restTime 

			If lstr_supp[I].empGubun <> '2' Then li_nRestTime += li_restTime 
			If lstr_supp[I].empGubun = '2' Then li_eRestTime += li_restTime 
		End If
		
	Next 
	FETCH restTimeList INTO :ldt_restFromTime, :ldt_restToTime, :li_restTime ;
Loop 
Close restTimeList ;

li_retnRestTime += li_nRestTime 
li_reteRestTime += li_eRestTime 

ri_nRestTime = li_retnRestTime 
ri_eRestTime = li_reteRestTime 

Return 1 

end function

