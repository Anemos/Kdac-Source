$PBExportHeader$f_find_n_th_modified_row.srf
$PBExportComments$n번째로 modified된 row와 buffer를 찾는다
global type f_find_n_th_modified_row from function_object
end type

forward prototypes
global function integer f_find_n_th_modified_row (ref datawindow adw_1, integer ai_n, dwbuffer abuf_1, dwbuffer abuf_2, dwbuffer abuf_3, ref dwbuffer abuf_found, ref long al_row)
end prototypes

global function integer f_find_n_th_modified_row (ref datawindow adw_1, integer ai_n, dwbuffer abuf_1, dwbuffer abuf_2, dwbuffer abuf_3, ref dwbuffer abuf_found, ref long al_row);///////////////////////////////////////////////////////////////////////////////
//   Function : f_find_n_th_modified_row
//
//    Purpose : 해당 datawindow에서 modified된(DataModified!,NewModified!,Deleted!)
//					 row들중 argument로 넘어온 ai_n번째의 row를 찾음
//
//  Argumnets :
//					 adw_1		... 대상 datawindow
//					 ai_n			... 몇번째로 modified된 row인지
//					 abuf_1		... 첫번째로 찾을 buffer
//					 abuf_2		... 두번째로 찾을 buffer
//					 abuf_3		... 세번째로 찾을 buffer
//					 abuf_found	... 찾은 buffer
//					 al_row		... 찾은 row number
//
//    Returns : integer
//					 -1		: Not Found
//		 			 1 		: Found
///////////////////////////////////////////////////////////////////////////////
LONG		ll_row = 0

//우선 abuf_1을 뒤진다
DO
	ll_row = adw_1.GetNextModified(ll_row, abuf_1)
	//찾았으면 count를 하나 줄인다 
	IF ll_row > 0 THEN ai_n --
	//ai_n번째의 row를 찾았으면 빠짐
	IF ai_n <= 0 THEN 
		abuf_found = primary!
		al_row = ll_row
		RETURN 1
	END IF
LOOP WHILE ll_row > 0

//abuf_2 Buffer
ll_row = 0
DO
	ll_row = adw_1.GetNextModified(ll_row, abuf_2)
	//찾았으면 count를 하나 줄인다 
	IF ll_row > 0 THEN ai_n --
	//ai_n번째의 row를 찾았으면 빠짐
	IF ai_n <= 0 THEN 
		abuf_found = abuf_2
		al_row = ll_row		
		RETURN 1
	END IF
LOOP WHILE ll_row > 0

//abuf_3 Buffer
ll_row = 0
DO
	ll_row = adw_1.GetNextModified(ll_row, abuf_3)
	//찾았으면 count를 하나 줄인다 
	IF ll_row > 0 THEN ai_n --
	//ai_n번째의 row를 찾았으면 빠짐
	IF ai_n <= 0 THEN 
		abuf_found = abuf_3
		al_row = ll_row		
		RETURN 1
	END IF
LOOP WHILE ll_row > 0

RETURN -1
end function

