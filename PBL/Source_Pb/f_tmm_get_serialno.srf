$PBExportHeader$f_tmm_get_serialno.srf
global type f_tmm_get_serialno from function_object
end type

forward prototypes
global function string f_tmm_get_serialno (string ag_codeid, ref string ref_error)
end prototypes

global function string f_tmm_get_serialno (string ag_codeid, ref string ref_error);string ls_nextno, ls_reftext, ls_rtn, ls_month, ls_year
integer li_cnt, li_totalcnt, li_rowcnt, li_idno, li_refno, li_rtn

sqlca.autocommit = false

select ifnull(idno,0), refno, reftext
into :li_idno, :li_refno, :ls_reftext
from  pbgms.tmm011
where codeid = :ag_codeid
using sqlca;

if sqlca.sqlcode <> 0 then
	ref_error = "에러코드 : 미소1"
  goto Rollback_
end if;

select month(current timestamp), cast(year(current timestamp) as char(4))
into :li_rtn, :ls_year
FROM PBCOMMON.COMM000 FETCH FIRST 1 ROW ONLY
using sqlca;

if sqlca.sqlcode <> 0 then
	ref_error = "에러코드 : 미소2"
  	goto Rollback_
end if;

ls_month = string(li_rtn,"00")

if ag_codeid = 'COT' or ag_codeid = 'COM' then
  	if (ls_year + ls_month) = ls_reftext then
    	update pbgms.tmm011
    		set idno = :li_idno + 1
    	where codeid = :ag_codeid
		using sqlca;
		
		if sqlca.sqlnrows < 1 then
			ref_error = "에러코드 : 미소3"
  			goto Rollback_
		end if
  else
    	li_idno = 1
    	ls_reftext = ls_year + ls_month
    	update pbgms.tmm011
    		set idno = 2, reftext = :ls_reftext
    	where codeid = :ag_codeid
		using sqlca;

    	if sqlca.sqlnrows < 1 then
			ref_error = "에러코드 : 미소4"
  			goto Rollback_
		end if
  end if
else
	update pbgms.tmm011
    	set idno = :li_idno + 1
   where codeid = :ag_codeid
	using sqlca;
		
	if sqlca.sqlnrows < 1 then
		ref_error = "에러코드 : 미소5"
		goto Rollback_
	end if
end if

ls_nextno = string(li_idno)
li_totalcnt = li_refno - len(ls_nextno);
li_cnt = 0
do while li_cnt < li_totalcnt
    li_cnt = li_cnt + 1
    ls_nextno = '0' + ls_nextno
loop

if ag_codeid = 'COT' or ag_codeid = 'COM' then
  ls_rtn = ls_reftext + ls_nextno
else
  ls_rtn = ls_nextno
end if

commit using sqlca;
sqlca.autocommit = true
return ls_rtn

Rollback_:
rollback using sqlca;
sqlca.autocommit = true

return "X"
end function

