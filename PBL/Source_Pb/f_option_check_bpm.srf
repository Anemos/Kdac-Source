$PBExportHeader$f_option_check_bpm.srf
$PBExportComments$Option 前格狼 惑困 前格 Checking
global type f_option_check_bpm from function_object
end type

forward prototypes
global function integer f_option_check_bpm (string a_year, string a_revno, string a_plant, string a_div, string a_itno)
end prototypes

global function integer f_option_check_bpm (string a_year, string a_revno, string a_plant, string a_div, string a_itno);string 	ls_div,ls_oitno[],ls_itno,ls_citno,ls_pitno,ls_chkitno[50,300],ls_kitno
integer 	i = 0,j = 0,k = 0,p = 0,ln_chk = 0

ls_itno = trim(a_itno)
ls_div  = trim(a_div)

declare optchk_cur cursor for 
  select 	"PBBPM"."BPM505"."OFITN" from "PBBPM"."BPM505"
     where 	"PBBPM"."BPM505"."OPITN" = :ls_itno AND "PBBPM"."BPM505"."XYEAR" = :a_year AND "PBBPM"."BPM505"."REVNO" = :a_revno AND
           	"PBBPM"."BPM505"."ODVSN" = :ls_div AND  "PBBPM"."BPM505"."OPLANT" = :a_plant AND 
    		(( trim("PBBPM"."BPM505"."OEDTE") =  ''  and "PBBPM"."BPM505"."OEDTM" <= :g_s_date ) or  
			(  trim("PBBPM"."BPM505"."OEDTE") <> ''  and "PBBPM"."BPM505"."OEDTM" <= :g_s_date  and "PBBPM"."BPM505"."OEDTE" >= :g_s_date ))
  using SQLCA ;

open optchk_cur ;
  ls_oitno[1] 	= a_itno
  i 				= 1
  do while true
    fetch optchk_cur into :ls_citno ;
    if sqlca.sqlcode <> 0 then
		exit
	 end if 
	 i 				= i + 1
    ls_oitno[i] 	= trim(ls_citno)
  loop
close optchk_cur ;

declare bom_cur cursor for 
  select 	"PBBPM"."BPM504"."PPITN" from "PBBPM"."BPM504"
     where 	"PBBPM"."BPM504"."PCITN" = :ls_pitno AND  "PBBPM"."BPM504"."XYEAR" = :a_year AND "PBBPM"."BPM504"."REVNO" = :a_revno AND
           	"PBBPM"."BPM504"."PDVSN" = :ls_div AND  "PBBPM"."BPM504"."PLANT" = :a_plant AND
          (( trim("PBBPM"."BPM504"."PEDTE") =  ''  and "PBBPM"."BPM504"."PEDTM" <= :g_s_date ) or  
			 (  trim("PBBPM"."BPM504"."PEDTE") <> ''  and "PBBPM"."BPM504"."PEDTM" <= :g_s_date  and "PBBPM"."BPM504"."PEDTE" >= :g_s_date ))   
  using SQLCA ;

for j = 1 to i
	ls_pitno = trim(ls_oitno[j])
	k 			= 0
	open bom_cur ;  
	do while true
		fetch bom_cur into :ls_kitno ;
		if sqlca.sqlcode <> 0 then
			exit
		end if 
		p = p + 1
		k = k + 1
		if p <> 1 then
			if ls_kitno = ls_chkitno[j,k] then
				continue
			end if
		end if
		ls_chkitno[j,k] = trim(ls_kitno)
   loop
   close bom_cur ;
next

if p = 0 then return 0

for j = 2 to i
		for k = 1 to 100
			if isnull(ls_chkitno[1,k]) = true and isnull(ls_chkitno[j,k]) = true then
				exit
			end if
         if ls_chkitno[1,k] <> ls_chkitno[j,k] then
				return 1
			end if
		next
next
return 0
 
end function

