$PBExportHeader$m_pop_menu.srm
$PBExportComments$Pop menu
forward
global type m_pop_menu from menu
end type
type m_action from menu within m_pop_menu
end type
type m_copy from menu within m_action
end type
type m_filtersetup from menu within m_action
end type
type m_filter from menu within m_action
end type
type m_sort from menu within m_action
end type
type m_downtoexecl from menu within m_action
end type
type m_print from menu within m_action
end type
type m_sep from menu within m_action
end type
type m_action1 from menu within m_action
end type
type m_action2 from menu within m_action
end type
type m_action3 from menu within m_action
end type
type m_action from menu within m_pop_menu
m_copy m_copy
m_filtersetup m_filtersetup
m_filter m_filter
m_sort m_sort
m_downtoexecl m_downtoexecl
m_print m_print
m_sep m_sep
m_action1 m_action1
m_action2 m_action2
m_action3 m_action3
end type
global type m_pop_menu from menu
m_action m_action
end type
end forward

global type m_pop_menu from menu
m_action m_action
end type
global m_pop_menu m_pop_menu

type variables
datawindow	 idw_get		//호출한 dw
string		is_window[]	//메뉴에서 호출할 window
string		is_data		//data
int		ii_row		//선택된 row
end variables

forward prototypes
public subroutine mf_get_dw (datawindow adw_get, integer ai_row, string as_col, string as_data)
end prototypes

public subroutine mf_get_dw (datawindow adw_get, integer ai_row, string as_col, string as_data);string ls_menu[],ls_win,ls_nm,ls_col
int li_num,ii

idw_get = adw_get
is_data = trim(as_data)
ls_col = Upper(as_col)
ii_row = ai_row

If idw_get.rowcount() = 0 Then
	//메뉴 disable
	For ii = 1 To 9
		this.item[1].item[ii].enabled = false
	Next
		this.item[1].item[2].enabled = true
	return
End if
	
//메뉴 초기화
For ii = 6 To 9
	this.item[1].item[ii].visible = false
Next
//컬럼이 아닌경우 
If Isnull(as_col) or trim(as_col) = "" Then 	return
//해당 컬럼의 메뉴 선택	
DECLARE WIN_CUR CURSOR FOR
SELECT "IUC_WIN_MENU"."WIN_ID","IUC_WIN_MENU"."MENU_NM"
FROM "IUC_WIN_MENU"
WHERE "IUC_WIN_MENU"."COLUMN_CD" = :ls_col ;

OPEN WIN_CUR;
FETCH WIN_CUR INTO :ls_win,:ls_nm ;

ii = 1
Do while sqlca.sqlcode = 0
	is_window[ii] = trim(ls_win)
	ls_menu[ii] = trim(ls_nm)
	ii++
	FETCH WIN_CUR INTO :ls_win,:ls_nm ;
Loop
CLOSE WIN_CUR;

li_num = UpperBound(is_window[])

If li_num = 0 Then return

//구분자 활성화
this.item[1].item[6].visible = true

//필요한 메뉴만 보이도록 한다.
For ii = 1 To li_num
	this.item[1].item[ii+6].text = ls_menu[ii] 
	this.item[1].item[ii+6].visible = true
Next

end subroutine

on m_pop_menu.create
m_pop_menu=this
call super::create
this.m_action=create m_action
this.Item[UpperBound(this.Item)+1]=this.m_action
end on

on m_pop_menu.destroy
call super::destroy
destroy(this.m_action)
end on

type m_action from menu within m_pop_menu
m_copy m_copy
m_filtersetup m_filtersetup
m_filter m_filter
m_sort m_sort
m_downtoexecl m_downtoexecl
m_print m_print
m_sep m_sep
m_action1 m_action1
m_action2 m_action2
m_action3 m_action3
end type

on m_action.create
call super::create
this.text = "기능"
this.m_copy=create m_copy
this.m_filtersetup=create m_filtersetup
this.m_filter=create m_filter
this.m_sort=create m_sort
this.m_downtoexecl=create m_downtoexecl
this.m_print=create m_print
this.m_sep=create m_sep
this.m_action1=create m_action1
this.m_action2=create m_action2
this.m_action3=create m_action3
this.Item[UpperBound(this.Item)+1]=this.m_copy
this.Item[UpperBound(this.Item)+1]=this.m_filtersetup
this.Item[UpperBound(this.Item)+1]=this.m_filter
this.Item[UpperBound(this.Item)+1]=this.m_sort
this.Item[UpperBound(this.Item)+1]=this.m_downtoexecl
this.Item[UpperBound(this.Item)+1]=this.m_print
this.Item[UpperBound(this.Item)+1]=this.m_sep
this.Item[UpperBound(this.Item)+1]=this.m_action1
this.Item[UpperBound(this.Item)+1]=this.m_action2
this.Item[UpperBound(this.Item)+1]=this.m_action3
end on

on m_action.destroy
call super::destroy
destroy(this.m_copy)
destroy(this.m_filtersetup)
destroy(this.m_filter)
destroy(this.m_sort)
destroy(this.m_downtoexecl)
destroy(this.m_print)
destroy(this.m_sep)
destroy(this.m_action1)
destroy(this.m_action2)
destroy(this.m_action3)
end on

type m_copy from menu within m_action
end type

event clicked;string ls_filter_string, ls_sort_string, ls_find_string
string ls_col_name, ls_col_type
integer li_pos, li_findrow

openwithparm(w_filter,idw_get)
ls_filter_string = trim(Message.StringParm)
	
if ls_filter_string = "unfilter" then
   idw_get.Setfilter("")
	idw_get.filter( )
elseif ls_filter_string <> "" and isnull(ls_filter_string) = false then
	// 변경로직
	// 정열한 뒤에 해당 조건에 대한 FIND하는 기능 부여
	li_pos = pos(ls_filter_string,"=",1)
	ls_sort_string = mid(ls_filter_string,1,(li_pos - 1))
	ls_find_string = mid(ls_filter_string,(li_pos + 1))
	
	long ll_rtn
	string ls_modtext
	
	ll_rtn = 1
	ls_modtext = ls_find_string
	do while(true)
		ll_rtn = pos(ls_modtext,"'",ll_rtn)
		if ll_rtn = 0 then
			exit
		end if
		ls_modtext = replace(ls_modtext,ll_rtn,1,"")
		ll_rtn = ll_rtn + 1
	loop
	
	idw_get.SetSort(ls_sort_string)
	idw_get.Sort()
	
	ls_col_name = trim(ls_sort_string)
	ls_col_type = UPPER(Mid(idw_get.Describe(ls_col_name + ".colType"),1,3))
	if ls_col_type = "CHA" then
		for li_pos = 1 to idw_get.rowcount()
			ls_col_type = idw_get.getitemstring(li_pos,ls_col_name)
			li_findrow = pos(idw_get.getitemstring(li_pos,ls_col_name),trim(ls_modtext))
			if pos(idw_get.getitemstring(li_pos,ls_col_name),trim(ls_modtext)) > 0 then
				li_findrow = li_pos
				exit
			end if
		next 
	else
		li_findrow = idw_get.find(ls_sort_string + " >= " + ls_find_string,1,idw_get.rowcount())
	end if
	
	if li_findrow > 0 then
		idw_get.SelectRow(0, FALSE)
		idw_get.SelectRow(li_findrow, TRUE)
		idw_get.scrolltorow(li_findrow)
	end if
//   idw_get.Setfilter(ls_filter_string)
//   idw_get.filter( )
//	if idw_get.RowCount() > 0 then
//		idw_get.Event RowFocusChanged(1)
//	end if
end if
		

end event

on m_copy.create
call super::create
this.text = "검색정의"
end on

on m_copy.destroy
call super::destroy
end on

type m_filtersetup from menu within m_action
end type

on m_filtersetup.create
call super::create
this.text = "필터정의"
end on

on m_filtersetup.destroy
call super::destroy
end on

event clicked;string ls_filter_string, ls_sort_string, ls_find_string
integer li_pos, li_findrow

openwithparm(w_filter,idw_get)
ls_filter_string = trim(Message.StringParm)
	
if ls_filter_string = "unfilter" then
   idw_get.Setfilter("")
	idw_get.filter( )
elseif ls_filter_string <> "" and isnull(ls_filter_string) = false then
   idw_get.Setfilter(ls_filter_string)
   idw_get.filter( )
	if idw_get.RowCount() > 0 then
		idw_get.Event RowFocusChanged(1)
	end if
end if
		

end event

type m_filter from menu within m_action
end type

on m_filter.create
call super::create
this.text = "필터취소"
end on

event clicked;//f_dw_rowcopy(idw_get,ii_row)
idw_get.Setfilter("")
idw_get.filter( )
end event

on m_filter.destroy
call super::destroy
end on

type m_sort from menu within m_action
end type

on m_sort.create
call super::create
this.text = "정렬"
end on

event clicked;string ls_parm

OpenWithParm(w_sort, idw_get)

ls_parm = Trim(Message.StringParm)
idw_get.SetSort(ls_parm)
idw_get.Sort()
idw_get.GroupCalc()


end event

on m_sort.destroy
call super::destroy
end on

type m_downtoexecl from menu within m_action
end type

on m_downtoexecl.create
call super::create
this.text = "다른이름으로저장"
end on

event clicked;//f_down_to_excel(idw_get)
idw_get.saveas()
end event

on m_downtoexecl.destroy
call super::destroy
end on

type m_print from menu within m_action
end type

event clicked;OpenWithParm(w_dw_print, idw_get)

end event

on m_print.create
call super::create
this.text = "인쇄"
end on

on m_print.destroy
call super::destroy
end on

type m_sep from menu within m_action
end type

on m_sep.create
call super::create
this.visible = false
this.text = "-"
end on

on m_sep.destroy
call super::destroy
end on

type m_action1 from menu within m_action
end type

on m_action1.create
call super::create
this.visible = false
this.text = "action1"
end on

event clicked;//window lw_win
//
//OpenWithParm(lw_win,is_data,is_window[1])

end event

on m_action1.destroy
call super::destroy
end on

type m_action2 from menu within m_action
end type

on m_action2.create
call super::create
this.visible = false
this.text = "action2"
end on

event clicked;window lw_win

OpenWithParm(lw_win,is_data,is_window[2])
end event

on m_action2.destroy
call super::destroy
end on

type m_action3 from menu within m_action
end type

on m_action3.create
call super::create
this.visible = false
this.text = "action3"
end on

event clicked;window lw_win

OpenWithParm(lw_win,is_data,is_window[3])
end event

on m_action3.destroy
call super::destroy
end on

