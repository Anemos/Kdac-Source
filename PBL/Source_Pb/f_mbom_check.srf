$PBExportHeader$f_mbom_check.srf
$PBExportComments$MBOM에서 상위품번을 체크하는 함수
global type f_mbom_check from function_object
end type

forward prototypes
global function string f_mbom_check (string a_plant, string a_div, string a_itno, string a_sitno, string a_oedtm, string a_oedte)
end prototypes

global function string f_mbom_check (string a_plant, string a_div, string a_itno, string a_sitno, string a_oedtm, string a_oedte);string l_s_div , l_s_oitno[] ,l_s_itno, l_s_citno , l_s_pitno, l_s_chkitno[50,300] &
			,l_s_oedte[],l_s_dte,l_s_chkdte[50,300] &                
				,l_s_oedtm[] , l_s_dtm , l_s_chkdtm[50,300] &
					,l_s_from,l_s_to, l_s_chkitno1[50,300]
integer i , j , k , a_chk,li_no = 1,count_chk[]

l_s_itno = trim(a_itno)
l_s_div  = trim(a_div)
if f_spacechk(a_oedtm) = -1 then
	a_oedtm = g_s_date
end if
a_chk = 0
k = 0
j = 0 
i = 0

l_s_oitno[1] = trim(a_itno)
l_s_oitno[2] = trim(a_sitno)
l_s_oedte[2] = a_oedte
l_s_oedtm[2] = a_oedtm
DECLARE bomchk_cur CURSOR FOR 
  SELECT "PBPDM"."BOM001"."PPITN","PBPDM"."BOM001"."PEDTM","PBPDM"."BOM001"."PEDTE" FROM "PBPDM"."BOM001"
	  WHERE "PBPDM"."BOM001"."PCITN" = :l_s_pitno
			  AND "PBPDM"."BOM001"."PLANT" = :a_plant AND "PBPDM"."BOM001"."PDVSN" = :l_s_div and
			  ( ("PBPDM"."BOM001"."PEDTM" <= "PBPDM"."BOM001"."PEDTE" AND "PBPDM"."BOM001"."PEDTE" <> ' ' AND "PBPDM"."BOM001"."PEDTE" >= :a_oedtm )
					OR  
			  ( "PBPDM"."BOM001"."PEDTE" = ' ' AND "PBPDM"."BOM001"."PEDTM" <= :a_oedtm ))
order by 1,2,3
using SQLCA ;

for j = 1 to 2
	l_s_pitno = l_s_oitno[j]
	k = 0
	open bomchk_cur ;  
		do while true
			fetch bomchk_cur into :l_s_citno,:l_s_dtm,:l_s_dte ;
			if sqlca.sqlcode <> 0 then
				exit
			end if 
			k = k + 1
			l_s_chkitno[j,k] = trim(l_s_citno)
			l_s_chkdte[j,k]  = trim(l_s_dte)
			l_s_chkdtm[j,k]  = trim(l_s_dtm)
	  loop
   close bomchk_cur ;
	count_chk[j] = k
next

if count_chk[1] <> count_chk[2] then
	return 'i' + l_s_chkitno[2,k]
end if
for k = 1 to count_chk[1]
	if isnull(l_s_chkitno[1,k]) = true and isnull(l_s_chkitno[2,k]) = true then
		exit
	end if
	if l_s_chkitno[1,k] <> l_s_chkitno[2,k] then
		return 'i' + l_s_chkitno[2,k]
	end if
next

//가장 늦은 적용일 찾기
l_s_from = l_s_chkdtm[1,1]
for j=1 to 2	
	for k=1 to count_chk[j]
		if f_spacechk(l_s_chkdtm[j,k]) = -1 then
			//nothing
		else
			if l_s_chkdtm[j,k] >= l_s_from then
				l_s_from = l_s_chkdtm[j,k]
			else
				//nothing
			end if
		end if
	next
next
//가장 빠른 완료일 찾기
l_s_to = l_s_chkdte[1,1]
for j=1 to 2
	for k = 1 to count_chk[j]
		if f_spacechk(l_s_chkdte[j,k]) = -1 then
			//nothing
		else
			if l_s_chkdte[j,k] <= l_s_to then
				l_s_to = l_s_chkdte[j,k]
			else
				//nothing
			end if
		end if
	next
next

if l_s_from = "" then
	if l_s_to = "" then
		//nothing
	else
		if l_s_oedte[2] <= l_s_to then
			//nothing
		else
			return "d" + "to:" + l_s_to
		end if
	end if
else
	if l_s_to = "" then
		if l_s_oedtm[2] >= l_s_from then
			//nothing
		else
			return "d" + "from:" + l_s_from
		end if
	else
		if l_s_oedte[2] <= l_s_to and l_s_oedtm[2] >= l_s_from then
			//nothing
		else
			return "d" + "from:" + l_s_from + "to:" + l_s_to
		end if
	end if
end if
return ""
 
end function

