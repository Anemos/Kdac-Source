$PBExportHeader$gf_excel_filesave.srf
$PBExportComments$엑셀다운로드
global type gf_excel_filesave from function_object
end type

forward prototypes
global function integer gf_filesave (boolean arg_trans, boolean arg_select, datawindow dw_filesave, datawindow dw)
global function integer gf_excel_filesave (boolean arg_trans, boolean arg_select, datawindow dw_filesave, datawindow dw)
end prototypes

global function integer gf_filesave (boolean arg_trans, boolean arg_select, datawindow dw_filesave, datawindow dw);//dw를 엑셀이나 txt로 저장할때 제목에 한글 출력, 컬럼들의 내용을 보이는 그대로 출력
//
//사용방법
//1. 윈도웅에 dw_filesave라는 dw오브젝트 하나 만들어주세요
//2. li_Rtn = wf_filesave(TRUE, FALSE, dw_sheet)  //A, B, C
// A : TRUE  - 컬럼을 화면text그대로 출력
//     FALSE - 컬럼 변환없이 그대로 출력(코드성데이타를 그대로 보고싶을때)
// B : TRUE  - 선택된 ROW만 출력
//     FALSE - 전체 조회된 내역 출력
// C : 파일저장하고싶은 dw
//
//3. 저장하고 싶은 dw의 header부분의 text name은 '컬럼명_t'로 되있어야 합니다.
//   (예: user_id컬럼의 header text name은 user_id_t)
//


//===============================================================================//
//=         처  리 : dw를 파일로 저장         				       =//
//=	    내  용 : arg_trans     - dddw, editmask, ddlb의 컬럼변환 TRUE/FALSE =//
//=	     	     arg_select    - 선택된 ROW만 파일저장	    TRUE/FALSE =//
//=		     dw            - 파일저장할 dw           		       =//
//=         RETURN : 오류 -1/0, 성공 1                                          =// 
//=         작성일 :               작성자 :  이경범	   		        =//
//=         수정일 :               수정자 :                                     =//
//===============================================================================//


String ls_PathName
String ls_KindOfFile
Long   ll_Net
String ls_FileName
Int    li_Return

String ls_DWSyntax
Long   i, j, c
Long   ll_ColCnt
String ls_Column
String ls_ColType
String ls_Style
String ls_editmask
String ls_editformat
String ls_DBName

dw.AcceptText()
dw_filesave.shareDataOff()
dw_filesave.Reset()

IF dw.RowCount() = 0 THEN 
//   MessageBox(TRUE, 'SAVE_DATA_NO', '확인', '')   //'저장할 데이타가 없습니다'란 메시지박스 출력
   RETURN 0
END IF

IF arg_select = TRUE AND dw.GetSelectedRow(0) = 0 THEN
	MessageBox("확인","선택된 데이타가 없습니다.")
//   gf_msgbox(TRUE, 'DATA_NO', '확인', '선택된 ')  //선택된 데이타가 없습니다.
   RETURN 0
END IF

ls_PathName = "*.xls"
ls_KindOfFile = "EXCEL Files (*.xls),*.xls,TEXT Files (*.txt),*.txt"
			
ll_Net = GetFileSaveName("파일 저장", ls_PathName, ls_FileName, "xls", ls_KindOfFile)


IF ll_Net < 1 THEN RETURN ll_Net  //0:취소, 1:확인

IF FileExists(ls_FileName) THEN

   // 이미 ls_filename이란 파일이 있습니다. 새로운 파일로 덮어쓰시겠습니까?
	IF MessageBox ( "확인","이미 " + ls_filename + "이란 파일이 있습니다. 새로운 파일로 덮어쓰시겠습니까?" ,Exclamation!, OKCancel!, 1)  = 2 THEN RETURN 0
//	IF gf_msgbox(TRUE, 'FILE_REPLACE', '확인', ls_FileName) = 2 THEN RETURN 0
END IF


SetPointer(HourGlass!)

ls_DWSyntax = dw.Describe("datawindow.syntax")

dw_filesave.Create(ls_DWSyntax)
dw_filesave.SetTransObject(sqlca)

ll_ColCnt = Long( dw_filesave.Describe( 'datawindow.column.count' ) )
	
FOR i = 1 TO ll_ColCnt
	ls_Column = dw_filesave.Describe("#" + String(i)+".name")
	ls_DBName = dw_filesave.Describe(ls_column + "_t.text")
	
	dw_filesave.Modify(ls_column + ".dbname = '" + ls_DBName + "'")
NEXT


IF arg_select = TRUE THEN  //선택된 Row만 저장
   dw_filesave.Reset()
   	
   j = 0
   i = dw.GetSelectedRow(0)
   DO WHILE i > 0 
   	
      j ++
      dw.RowsCopy(i, i, Primary!, dw_filesave, j, Primary!)
      
      IF arg_trans = TRUE THEN  //dddw, ddlb, editmask, edit 변환	
      
         FOR c = 1 TO ll_ColCnt
            ls_Column = dw_filesave.Describe("#" + String(c)+".name")
            ls_ColType = dw_filesave.Describe(ls_Column + ".coltype")
            
            IF UPPER(Left(ls_ColType, 4)) = "CHAR" OR UPPER(Left(ls_ColType, 6)) = "STRING" THEN
            		
               ls_Style = UPPER(dw_filesave.Describe(ls_Column + ".Edit.Style"))
               	
               CHOOSE CASE ls_Style
                  CASE 'DDLB', 'DDDW'
                  	
                     dw_filesave.SetItem(j, ls_Column, dw.Describe("Evaluate('LookUpDisplay(" + ls_Column + ")', " + String(i) + ")"))
                  		
                  CASE 'EDITMASK'
                  		
                     ls_editmask = dw.Describe(ls_Column + ".editmask.mask")
                     IF ls_editmask <> "?" THEN
                        ls_editmask = f_global_replace(ls_editmask, "X", "@")  //X를 @로 변환(Global function 이용)
                        ls_editmask = f_global_replace(ls_editmask, "x", "@")
                        ls_editmask = f_global_replace(ls_editmask, "#", "@")
                        
                        dw_filesave.SetItem(j, ls_Column, String(dw.GetItemString(i, ls_Column), ls_editmask))
                     END IF
                  	
                  CASE 'EDIT'
                  	
                     ls_editformat = dw.Describe(ls_Column + ".format")
                     IF ls_editformat <> "?" THEN
                        dw_filesave.SetItem(j, ls_Column, String(dw.GetItemString(i, ls_Column), ls_editformat))
                     END IF
                  	
               END CHOOSE
            END IF
         NEXT
      END IF
      
      i = dw.GetSelectedRow(i)
   LOOP
	
ELSE  //전체 ROW저장
   dw.ShareData(dw_filesave)	
   
   IF arg_trans = TRUE THEN  //dddw, ddlb, editmask 변환	
   	
   FOR c = 1 TO ll_ColCnt
      ls_Column = dw_filesave.Describe("#" + String(c)+".name")
      ls_ColType = dw_filesave.Describe(ls_Column + ".coltype")
      
      IF UPPER(Left(ls_ColType, 4)) = "CHAR" OR UPPER(Left(ls_ColType, 6)) = "STRING" THEN
         
         ls_Style = UPPER(dw_filesave.Describe(ls_Column + ".Edit.Style"))
         
         CHOOSE CASE ls_Style
            CASE 'DDLB', 'DDDW'
                   
               FOR j = 1 TO dw_filesave.RowCount()	// 전체 Row에 대하여 반복
                  dw_filesave.SetItem(j, ls_Column, dw_filesave.Describe("Evaluate('LookUpDisplay(" + ls_Column + ")', " + String(j) + ")"))
               NEXT
               
            CASE 'EDITMASK'
               
               ls_editmask = dw_filesave.Describe(ls_Column + ".editmask.mask")
               IF ls_editmask <> "?" THEN
                  ls_editmask = f_global_replace(ls_editmask, "X", "@")
                  ls_editmask = f_global_replace(ls_editmask, "x", "@")
                  ls_editmask = f_global_replace(ls_editmask, "#", "@")
                  
                  FOR j = 1 TO dw_filesave.RowCount()	// 전체 Row에 대하여 반복
                     dw_filesave.SetItem(j, ls_Column, String(dw_filesave.GetItemString(j, ls_Column), ls_editmask))
                  NEXT
               END IF
               
            CASE 'EDIT'
               
               ls_editformat = dw.Describe(ls_Column + ".format")
               IF ls_editformat <> "?" THEN
                  
                  FOR j = 1 TO dw_filesave.RowCount()	// 전체 Row에 대하여 반복
                     dw_filesave.SetItem(j, ls_Column, String(dw_filesave.GetItemString(j, ls_Column), ls_editformat))
                  NEXT													
                     
               END IF	
               
         END CHOOSE
      END IF
     NEXT
   END IF		
   
END IF



CHOOSE CASE UPPER(Right(ls_FileName, 3))
   CASE 'XLS'
      li_Return = dw_filesave.SaveAs(ls_PathName, Excel!, TRUE)
   CASE 'TXT'
      li_Return = dw_filesave.SaveAs(ls_PathName, Text!, TRUE)
END CHOOSE
				
SetPointer(Arrow!)


Return li_Return
//
//IF li_Return <> 1 THEN
//	MessageBox("확인","파일저장 실패하였습니다")
////   gf_msgbox(TRUE, 'FILE_FAILD', '확인', '')  //파일저장 실패하였습니다
//   RETURN -1
//ELSE
//	MessageBox("확인","파일저장 성공하였습니다")
////   gf_msgbox(TRUE, 'PROCESS_END', '확인', '')  //파일저장 성공하였습니다
//   RETURN 1
//END IF			
end function

global function integer gf_excel_filesave (boolean arg_trans, boolean arg_select, datawindow dw_filesave, datawindow dw);/****************************************************
// 문제점 : Select 절에 나열된 순서대로 값을 내림.
*****************************************************/
//dw를 엑셀이나 txt로 저장할때 제목에 한글 출력, 컬럼들의 내용을 보이는 그대로 출력
//
//사용방법
//1. 윈도웅에 dw_filesave라는 dw오브젝트 하나 만들어주세요
//2. li_Rtn = wf_filesave(TRUE, FALSE, dw_sheet)  //A, B, C
// A : TRUE  - 컬럼을 화면text그대로 출력
//     FALSE - 컬럼 변환없이 그대로 출력(코드성데이타를 그대로 보고싶을때)
// B : TRUE  - 선택된 ROW만 출력
//     FALSE - 전체 조회된 내역 출력
// C : Target dw - 엑셀 파일 생성 dw 
// D : 엑셀로 다운받운받고 싶은  dw
//
//3. 저장하고 싶은 dw의 header부분의 text name은 '컬럼명_t'로 되있어야 합니다.
//   (예: user_id컬럼의 header text name은 user_id_t)
//


//===============================================================================//
//=         처  리 : dw를 파일로 저장         				       =//
//=	    내  용 : arg_trans     - dddw, editmask, ddlb의 컬럼변환 TRUE/FALSE =//
//=	     	     arg_select    - 선택된 ROW만 파일저장	    TRUE/FALSE =//
//=		     dw            - 파일저장할 dw           		       =//
//=         RETURN : 오류 -1/0, 성공 1                                          =// 
//=         작성일 :               작성자 :  이경범	   		        =//
//=         수정일 :               수정자 :                                     =//
//===============================================================================//


String ls_PathName
String ls_KindOfFile
Long   ll_Net
String ls_FileName
Int    li_Return

String ls_DWSyntax
Long   i, j, c
Long   ll_ColCnt
String ls_Column
String ls_ColType
String ls_Style
String ls_editmask
String ls_editformat
String ls_DBName

dw.AcceptText()
dw_filesave.shareDataOff()
dw_filesave.Reset()

IF dw.RowCount() = 0 THEN 
//   MessageBox(TRUE, 'SAVE_DATA_NO', '확인', '')   //'저장할 데이타가 없습니다'란 메시지박스 출력
   RETURN 0
END IF

IF arg_select = TRUE AND dw.GetSelectedRow(0) = 0 THEN
	MessageBox("확인","선택된 데이타가 없습니다.")
//   gf_msgbox(TRUE, 'DATA_NO', '확인', '선택된 ')  //선택된 데이타가 없습니다.
   RETURN 0
END IF

ls_PathName = "*.xls"
ls_KindOfFile = "EXCEL Files (*.xls),*.xls,TEXT Files (*.txt),*.txt"
			
ll_Net = GetFileSaveName("파일 저장", ls_PathName, ls_FileName, "xls", ls_KindOfFile)


IF ll_Net < 1 THEN RETURN ll_Net  //0:취소, 1:확인

IF FileExists(ls_FileName) THEN

   // 이미 ls_filename이란 파일이 있습니다. 새로운 파일로 덮어쓰시겠습니까?
	IF MessageBox ( "확인","이미 " + ls_filename + "이란 파일이 있습니다. 새로운 파일로 덮어쓰시겠습니까?" ,Exclamation!, OKCancel!, 1)  = 2 THEN RETURN 0
//	IF gf_msgbox(TRUE, 'FILE_REPLACE', '확인', ls_FileName) = 2 THEN RETURN 0
END IF


SetPointer(HourGlass!)

ls_DWSyntax = dw.Describe("datawindow.syntax")

dw_filesave.Create(ls_DWSyntax)
dw_filesave.SetTransObject(sqlca)

ll_ColCnt = Long( dw_filesave.Describe( 'datawindow.column.count' ) )
	
FOR i = 1 TO ll_ColCnt
	ls_Column = dw_filesave.Describe("#" + String(i)+".name")
	ls_DBName = dw_filesave.Describe(ls_column + "_t.text")
	
	dw_filesave.Modify(ls_column + ".dbname = '" + ls_DBName + "'")
NEXT


IF arg_select = TRUE THEN  //선택된 Row만 저장
   dw_filesave.Reset()
   	
   j = 0
   i = dw.GetSelectedRow(0)
   DO WHILE i > 0 
   	
      j ++
      dw.RowsCopy(i, i, Primary!, dw_filesave, j, Primary!)
      
      IF arg_trans = TRUE THEN  //dddw, ddlb, editmask, edit 변환	
      
         FOR c = 1 TO ll_ColCnt
            ls_Column = dw_filesave.Describe("#" + String(c)+".name")
            ls_ColType = dw_filesave.Describe(ls_Column + ".coltype")
            
            IF UPPER(Left(ls_ColType, 4)) = "CHAR" OR UPPER(Left(ls_ColType, 6)) = "STRING" THEN
            		
               ls_Style = UPPER(dw_filesave.Describe(ls_Column + ".Edit.Style"))
               	
               CHOOSE CASE ls_Style
                  CASE 'DDLB', 'DDDW'
                  	
                     dw_filesave.SetItem(j, ls_Column, dw.Describe("Evaluate('LookUpDisplay(" + ls_Column + ")', " + String(i) + ")"))
                  		
                  CASE 'EDITMASK'
                  		
                     ls_editmask = dw.Describe(ls_Column + ".editmask.mask")
                     IF ls_editmask <> "?" THEN
                        ls_editmask = f_global_replace(ls_editmask, "X", "@")  //X를 @로 변환(Global function 이용)
                        ls_editmask = f_global_replace(ls_editmask, "x", "@")
                        ls_editmask = f_global_replace(ls_editmask, "#", "@")
                        
                        dw_filesave.SetItem(j, ls_Column, String(dw.GetItemString(i, ls_Column), ls_editmask))
                     END IF
                  	
                  CASE 'EDIT'
                  	
                     ls_editformat = dw.Describe(ls_Column + ".format")
                     IF ls_editformat <> "?" THEN
                        dw_filesave.SetItem(j, ls_Column, String(dw.GetItemString(i, ls_Column), ls_editformat))
                     END IF
                  	
               END CHOOSE
            END IF
         NEXT
      END IF
      
      i = dw.GetSelectedRow(i)
   LOOP
	
ELSE  //전체 ROW저장
   dw.ShareData(dw_filesave)	
   
   IF arg_trans = TRUE THEN  //dddw, ddlb, editmask 변환	
   	
   FOR c = 1 TO ll_ColCnt
      ls_Column = dw_filesave.Describe("#" + String(c)+".name")
      ls_ColType = dw_filesave.Describe(ls_Column + ".coltype")
      
      IF UPPER(Left(ls_ColType, 4)) = "CHAR" OR UPPER(Left(ls_ColType, 6)) = "STRING" THEN
         
         ls_Style = UPPER(dw_filesave.Describe(ls_Column + ".Edit.Style"))
         
         CHOOSE CASE ls_Style
            CASE 'DDLB', 'DDDW'
                   
               FOR j = 1 TO dw_filesave.RowCount()	// 전체 Row에 대하여 반복
                  dw_filesave.SetItem(j, ls_Column, dw_filesave.Describe("Evaluate('LookUpDisplay(" + ls_Column + ")', " + String(j) + ")"))
               NEXT
               
            CASE 'EDITMASK'
               
               ls_editmask = dw_filesave.Describe(ls_Column + ".editmask.mask")
               IF ls_editmask <> "?" THEN
                  ls_editmask = f_global_replace(ls_editmask, "X", "@")
                  ls_editmask = f_global_replace(ls_editmask, "x", "@")
                  ls_editmask = f_global_replace(ls_editmask, "#", "@")
                  
                  FOR j = 1 TO dw_filesave.RowCount()	// 전체 Row에 대하여 반복
                     dw_filesave.SetItem(j, ls_Column, String(dw_filesave.GetItemString(j, ls_Column), ls_editmask))
                  NEXT
               END IF
               
            CASE 'EDIT'
               
               ls_editformat = dw.Describe(ls_Column + ".format")
               IF ls_editformat <> "?" THEN
                  
                  FOR j = 1 TO dw_filesave.RowCount()	// 전체 Row에 대하여 반복
                     dw_filesave.SetItem(j, ls_Column, String(dw_filesave.GetItemString(j, ls_Column), ls_editformat))
                  NEXT													
                     
               END IF	
               
         END CHOOSE
      END IF
     NEXT
   END IF		
   
END IF



CHOOSE CASE UPPER(Right(ls_FileName, 3))
   CASE 'XLS'
      li_Return = dw_filesave.SaveAs(ls_PathName, Excel!, TRUE)
   CASE 'TXT'
      li_Return = dw_filesave.SaveAs(ls_PathName, Text!, TRUE)
END CHOOSE
				
SetPointer(Arrow!)


//Return li_Return
//
IF li_Return <> 1 THEN
	MessageBox("확인","파일저장 실패하였습니다")
////   gf_msgbox(TRUE, 'FILE_FAILD', '확인', '')  //파일저장 실패하였습니다
   RETURN -1
ELSE
	MessageBox("확인","파일저장 성공하였습니다")
////   gf_msgbox(TRUE, 'PROCESS_END', '확인', '')  //파일저장 성공하였습니다
   RETURN 1
END IF			
end function

