$PBExportHeader$f_get_excel_inv.srf
global type f_get_excel_inv from function_object
end type

forward prototypes
global function integer f_get_excel_inv (datawindow adw_target, integer ai_row, integer ai_col, ref string as_filename)
end prototypes

global function integer f_get_excel_inv (datawindow adw_target, integer ai_row, integer ai_col, ref string as_filename);////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * Excel File 내용을 직접 읽어서 해당 DataWindow에 Import(UpLoad) *   << Excel Header 제외 >>
//
//                                                                              2003.02.26   박병주
//
// 사용시 주의법:  Excel DownLoad(f_Save_To_Excel)와는 달리 Excel UpLoad(f_Get_From_Excel)는
//                 사용시 주의할점이 있습니다.( UpLoad는 상당한 주의가 필요합니다. )
//
//                 1. Excel File의 내용을 순서대로 해당 DataWindow에 넣어주기 때문에 엑셀파일의 내용 순서와
//                 DataWindow Column의 순서가 같아야 합니다.
//                 ( 물론, DataWindow의 Column갯수와 엑셀시트의 가로열개수는 같아야 합니다. )
//                 2. DataWindow 각 Column의 Data Type이 Excel File의 내용을 담을수 있어야 합니다.
//                 3. 해당 DataWindow에 Import될 엑셀 파일의 내용(각 Cell)중 Null값이 있으면 안됩니다.
//
//                 위 조건을 만족시키지 않을시 UpLoad 도중 작업이 멈춰버릴수 있습니다.
//
//						 Argument   datawindow     adw_target	: 엑셀파일내용을 옮길 DataWindow
//										integer        ai_row	   : 가로
//										integer			ai_col		: 세로
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

String ls_PathName, ls_FileName, ls_msg, ls_NewfileName
Int li_Rtn, li_FileNum

li_Rtn = GetFileOpenName( "[Excel UpLoad]", ls_PathName, ls_FileName, "xls", &
								  "Excel Files (*.xls), *.xls" )
If li_Rtn = 0 Then Return -1

SetPointer( HourGlass! )

adw_Target.Reset( )

OleObject	OLE_Excel

OLE_Excel = Create OleObject

li_Rtn = OLE_Excel.ConnectToObject( ls_PathName )
If li_Rtn <> 0 Then
	
	Destroy OLE_Excel
	choose case li_rtn
		case	-1  
			ls_msg = 'Invalid call: the argument is the Object property of a control'
		case -2  
			ls_msg = 'Class name not found'
		case -3  
			ls_msg = 'Object could not be created'
		case -4  
			ls_msg = 'Could not connect to object'
		case -5  
			ls_msg = "Can't connect to the currently active object"
		case -6  
			ls_msg = 'Filename is not valid'
		case -7  
			ls_msg = "File not found or file couldn't be opened"
		case -8  
			ls_msg = 'Load from file not supported by server'
		case -9  
			ls_msg = 'Other error'
		case -15  
			ls_msg = 'MTS is not loaded on this computer'
		case -16  
			ls_msg = "Invalid Call: this function not applicable to OLETxnObject"
	end choose
	
//	OLE_Excel.Application.Quit
//	OLE_Excel.DisConnectObject( )
//	
//	Destroy	OLE_Excel

	MessageBox("확인", ls_msg, Exclamation!)
	Return -1
End If


SetPointer( HourGlass! )

OleObject	OLE_Sheet

OLE_Sheet = OLE_Excel.Application.WorkBooks(1).WorkSheets(1)

Long	Col = 1, Row = 1, ColCnt, RowCnt
string ls_coltype,ls_data

ColCnt = Long( adw_Target.Object.DataWindow.Column.Count )

SetPointer( HourGlass! )
Do While True
	
	Row = adw_Target.InsertRow( 0 )
		
	For Col = 1 To ColCnt
		ls_data = string(OLE_Sheet.Cells(Row + ai_row, Col + ai_col).Value)
	   ls_data = trim(ls_data)
	   adw_Target.Object.data[Row, Col] = ls_data

		//숫자와문자구분  // Excel Header 제외.
		 ls_coltype  = adw_target.Describe("#" + String(col) + ".ColType")
       ls_coltype  = Upper(LEFT(ls_coltype,3))
		 
		 if ls_coltype = 'NUM' or ls_coltype = 'DEC' or ls_coltype = 'LON' then
			 ls_data = string(OLE_Sheet.Cells(Row + ai_row, Col + ai_col).Value)
			 
			 if isnumber(ls_data) = false then
				 messagebox('확인','행:' + string(row) + ' 열:' + string(col) + ' DataType이 맞지않습니다.',Exclamation!)
				 li_rtn = -1
				 exit
			 end if
			 adw_Target.Object.data[Row, Col] = dec(ls_data)
		 else
			 
			 ls_data = string(OLE_Sheet.Cells(Row + ai_row, Col + ai_col).Value)
			 ls_data = trim(ls_data)
			 adw_Target.Object.data[Row, Col] = ls_data
		 end if
		 
		 //messagebox(string(col),'길이:' + string(len(ls_data)) + ' DATA:' + ls_data)
														
	Next	

//	If IsNull( OLE_Sheet.Cells(Row + 2, 1).Value ) or trim(string(OLE_Sheet.Cells(Row + 2, 1).Value)) = '' Then Exit
	If IsNull( OLE_Sheet.Cells(Row + ai_row + 1, 1 + ai_col).Value ) or trim(string(OLE_Sheet.Cells(Row + ai_row + 1, 1 + ai_col).Value)) = '' Then Exit
	// 다음 가로열의 첫번째 Cell내용이 아무것도 없으면 Import 종료. 
Loop
//messagebox('row',string(Row))

OLE_Excel.Application.Quit
OLE_Excel.DisConnectObject( )

Destroy	OLE_Excel
Destroy	OLE_Sheet

if li_rtn <> -1 then
  MessageBox( '확인!', string(row) + '개 Excel UpLoad가 완료됐습니다.' )
  
  ls_NewfileName = 'Open'+ls_FileName

  li_FileNum = FileCopy (ls_FileName ,ls_NewfileName, True)
	
  If li_FileNum = 1 then FileDelete(ls_FileName)
   
  as_filename = ls_NewfileName	
  return 0
end if

	
	
//SetPointer(Arrow!)
Return -1
end function

