$PBExportHeader$f_security.srf
$PBExportComments$사용자 권한 체크
global type f_security from function_object
end type

forward prototypes
global function boolean f_security (string a_pgm_cd, string a_emp_id, string a_dept_cd, string a_auth_key)
end prototypes

global function boolean f_security (string a_pgm_cd, string a_emp_id, string a_dept_cd, string a_auth_key);// #########################################################################################
//
// 사용목적: 권한여부를 결정한다.
//
// RETURN   : 	boolean ( 권한있음: TRUE, 권한없음:FALSE )
//
// ARGUMENT : 	a_pgm_cd			string	value
// 				a_emp_id			string	value
//					a_dept_cd		string	value
//					a_auth_key		string	value
//
// LOGIC설명:  1.권한의 우선순위는 개인->그룹->부서 이다.
//					3.기본 security찾기
//					  1) 사용자 등급이 "A"이 경우에는 RETURN TRUE
//					  2) 현재 pgm_cd에서 연결된 권한PGM코드 찾기.
//						  이때 최종값을 현재의 pgm_cd로 한다.
//
//					  3) pgm_cd가 권한부여되어 있는지 확인한다.( pym07 )
//						  만약 한개도 없으면 return TRUE
//					  4. 사용자등급이 "A"이면서 프로그램이 관리자(A)에게 허용되어 있으면 return TRUE.
//					  5) 여기(pym07)에 userid가 없으면 다시 그룹에 있는지 찾는다.
//					     그룹이 여러개 등록되어 있고 userid가 중복해서 속해 있는경우 
//					      첫번째 만나는 그룹을 소속그룹으로 한다.( order by )
//					  6) 그룹에도 없으면 userid의 해당부서코드(arg_dept)가 pym07에 있는지
//						  찾는다. ( userid는 하나의 부서에만 속해있다. )
//					  7) 이렇게 해서 얻어진 값을 ls_user_grp_dept에 대입한다.
//					     * 이때 최종값은 프로그램코드일 수도, 그룹명일 수도, 부서코드일수도 있다.
//					
//					4.ls_user_grp_dept에 값이 있으면 기본 security룰 찾은 것이므로 아래와 같이 
//					  arg_autho_key와 비교하여 최종결과를 판단한다.
//					 
//					  권한등급   arg_autho_key   	 결과 
//					 ----------  -------------	  	-------
//						Q(OPEN)      "_OPEN_"     	 TRUE
//							            any        	 FALSE
//					 ----------  -------------	  	-------
//						U(ALL)       "_OPEN_"     	 TRUE
//							            any        	 TRUE
//					 ----------  -------------	  	-------
//						E(세부)      "_OPEN_"     	 TRUE
//							       pym10에 있는경우	 TRUE
//							       pym10에 없는경우	 FALSE
//					 ----------  -------------	  -------
//						
// #########################################################################################

string	ls_user_grp_dept, is_user_grd, ls_read
string	pgm_cd, autho_grd, user_grp_id, grp_id, user_id, autho_key, emp_no, ls_temp
string	grp_ids[], autho_grds[] 
long		pgm_cnt, ll_read
int		i, li_count
string	pgm_cd_tmp, autho_rel_pgm_cd
string	security_grd

a_pgm_cd 	=	Upper(Trim( a_pgm_cd ))
a_emp_id 	=	Upper(Trim( a_emp_id ))
a_dept_cd	=	Upper(Trim( a_dept_cd ))
a_auth_key 	=	Upper(Trim( a_auth_key ))

connect using sqlpis;
	SELECT count(*) 
    INTO :li_count
    FROM comm140  
   WHERE ( comm140.EMP_NO = :a_emp_id ) AND  
         ( comm140.USE_WIN in ('w_','w_pisf') )   using sqlpis;

  SELECT USE_GRD  
    INTO :ls_read
    FROM comm140  
   WHERE ( comm140.EMP_NO = :a_emp_id ) AND  
         ( comm140.USE_WIN = :a_pgm_cd )   using sqlpis;
disconnect using sqlpis;

if li_count >= 1 then
	return true
end if

choose case		a_auth_key
	case	'_RETRIEVE_', '_PRINT_'
		RETURN TRUE
	case	'_SAVE_', '_INSERT_', '_DELETE_'
		if ls_read = '5' then
			RETURN TRUE
		else
			RETURN FALSE
		end if
end choose

////IF a_pgm_cd = '' OR a_emp_id = '' OR a_dept_cd = '#' THEN
//IF a_pgm_cd = '' OR a_emp_id = '' THEN
////	MessageBox( 'f_security:0', 'PARAMETER 없음' )
//	return FALSE
//END IF	
//
//// 사용자 등급을 찾는다.  ( gs_emp_grd <-- is_user_grd )
//
//// 권한이 다름 프로그램에 연결되어 있는지 찾는다.
//// 다른프로그램에 연결되어있으면 그 코드를 a_pgm_cd에 대입한다.
//pgm_cd_tmp = a_pgm_cd
//DO WHILE TRUE
//	SELECT "PGM_AUTH_CHAIN", "MGMT_GRD_CD"
//	  INTO :autho_rel_pgm_cd, :security_grd
//	  FROM "ICB_PGM_MASTER" 
//	 WHERE "PGM_CD" = :pgm_cd_tmp	;
//	 
//	IF sqlca.sqlcode = 0 THEN 
//		IF IsNull( autho_rel_pgm_cd ) OR autho_rel_pgm_cd = '' THEN
//			// 더이상 연결된것이 없으면 현재의 코드를 pgm_cd로 한다.
//			a_pgm_cd = pgm_cd_tmp
//			EXIT
//		ELSE
//			//계속 찾기..
//			pgm_cd_tmp = autho_rel_pgm_cd
//		END IF
//	ELSEIF sqlca.sqlcode = 100 THEN 
//		// 해당 프로그램코드가 존재하지 않는다.( table관리 Mistake )
//		// 아마 해당 프로그램 코드가 삭제되것 같다.
////		MessageBox( 'f_security:2', sqlca.sqlerrtext )
//		return false
//	ELSE
//		// database error
////		MessageBox( 'f_security:3', sqlca.sqlerrtext )
//		return false
//	END IF
//LOOP
//
//
////// pgm_cd가 권한부여table에 등록되어 있는지 찾는다.
////SELECT COUNT( "PGM_CD" )
////  INTO :pgm_cnt
////  FROM "ICB_PGM_USER_DETAIL"
//// WHERE "PGM_CD" = :a_pgm_cd;
////IF sqlca.sqlcode <> 0 THEN 
////	// database error
//////	MessageBox( 'f_security:4', sqlca.sqlerrtext )
////	return false
////END IF
////
////// 한 건도 없으면 항상 false
////IF pgm_cnt < 1 THEN return FALSE
////
//
////프로그램이 '관리자'에게 허용되어 있고 사용자 등급이 '관리자'이면 OPEN은 TRUE
//IF security_grd = 'Y' AND gs_emp_grd = 'A' THEN
//	IF a_auth_key  = '_OPEN_' THEN
//		return TRUE
//	ELSE
//		SELECT "AUTH_KEY"
//		  INTO :ls_temp 
//		  FROM "ICB_PGM_AUTHO_DETAIL" 
//		 WHERE "PGM_CD" 		= :a_pgm_cd 			AND 
//				 "AUTH_KEY"   	= :a_auth_key			;
//		IF sqlca.sqlcode = 0 THEN // 등록된 key가 없으면
//			RETURN TRUE
//		ELSE
//			RETURN FALSE
//		END IF
//	END IF
//END IF
//
////// 해당 pgm_cd에 '__ALL__'로 된 user_id가 있으면 OPEN은 모두에게 허용된다.
////SELECT autho_grd 
////  INTO :autho_grd 
////  FROM pym07 
//// WHERE pgm_cd = :arg_pgm_cd AND user_grp_id = '__ALL__';
////IF sqlca.sqlcode = 0 AND arg_autho_key = '_OPEN_' THEN
////	return TRUE
////END IF
//
//// pgm_cd + user_id로 찾기
//SELECT "AUTH_GRD_CD"
//  INTO :autho_grd 
//  FROM "ICB_PGM_USER_DETAIL"
// WHERE "PGM_CD" = :a_pgm_cd AND "USER_GRP_ID" = :a_emp_id	;
// 
//IF sqlca.sqlcode = 100 THEN // 사용자 ID로써 존재하지 않으면 그룹에서 찾는다.
//
//
//	/////////////////////////////////////////
//	//존재하는 그룹명을 모두 불러오고( ** priority 순서로 ** )
//	//맨처음 user id가 존재하는 그룹이 있으면 그것을 기본 security로 한다.
//	DECLARE cur CURSOR FOR
//		SELECT "USER_GRP_ID", "AUTH_GRD_CD"
//		  FROM "ICB_PGM_USER_DETAIL"
//		 WHERE "PGM_CD" = :a_pgm_cd AND "USER_GRP_ID" like '#%' ORDER BY "AUTH_PRIO_RANK"	;
//		 
//	OPEN cur;
//	
//	DO WHILE True
//		FETCH cur INTO :grp_id, :autho_grd ;
//		IF sqlca.sqlcode <> 0 THEN EXIT
//		grp_ids[UpperBound(grp_ids) + 1 ] = grp_id
//		autho_grds[UpperBound(autho_grds) + 1 ] = autho_grd
//	LOOP
//	CLOSE cur;
//	
//	IF UpperBound( grp_ids ) > 0 THEN
//		FOR i = 1 TO UpperBound( grp_ids )
//			grp_ids[i] = mid(grp_ids[i],2,Len(grp_ids[i]) - 1)
//			SELECT "EMP_ID" 
//			  INTO :user_id
//			  FROM "IUC_GROUP_DETAIL"
//			 WHERE "GRP_ID" = :grp_ids[i] AND "EMP_ID" = :a_emp_id	;
//			IF sqlca.sqlcode = 0 THEN // 구성원에 있으므로..
//				ls_user_grp_dept 	= grp_ids[i]
//				autho_grd  			= autho_grds[i]
//				ls_user_grp_dept = '#' + ls_user_grp_dept
//				EXIT
//			ELSEIF sqlca.sqlcode <> 100 THEN
//				// database error
////				MessageBox( 'f_security:5', sqlca.sqlerrtext )
//				RETURN FALSE
//			END IF
//		NEXT
//	END IF
//	/////////////////////////////////////////
//
//	IF ls_user_grp_dept = '' THEN //그룹전체에서 없으므로 
//		
//		// pgm_cd + ('#'+부서코드) 로 찾기
//		SELECT "AUTH_GRD_CD"
//		  INTO :autho_grd 
//		  FROM "ICB_PGM_USER_DETAIL"
//		 WHERE "PGM_CD" = :a_pgm_cd AND "USER_GRP_ID" = :a_dept_cd	;
//		 
//		IF sqlca.sqlcode = 100 THEN
//			// messagebox( '1', '' )
//			RETURN FALSE
//		ELSEIF sqlca.sqlcode = 0 THEN
//			ls_user_grp_dept 	= a_dept_cd
//		ELSEIF sqlca.sqlcode <> 0 THEN
//			// database error
////			MessageBox( 'f_security:6', sqlca.sqlerrtext )
//			RETURN FALSE
//		END IF
//	END IF
//
//ELSEIF sqlca.sqlcode = 0 THEN
//	ls_user_grp_dept = a_emp_id
//
//ELSE
//	// database error
////	MessageBox( 'f_security:8', sqlca.sqlerrtext )
//	RETURN FALSE
//END IF
//
//////여기까지 기본 security는 찾은것..( 즉 OPEN은 무조건 할 수 있다. )
////여기서 ls_user_grp_dept는 사용자ID일 수도 있도, 해당그룹명일 수도, 부서코드일 수도 있다.
//
//IF a_auth_key  = '_OPEN_' THEN return TRUE
////권한등급이 ALL이면 프로그램에 등록된 모든 권한에 대해서 무조건 TRUE
//IF autho_grd = 'A' THEN
//	SELECT "AUTH_KEY"
//	  INTO :ls_temp 
//	  FROM "ICB_PGM_AUTHO_DETAIL" 
//	 WHERE "PGM_CD" 		= :a_pgm_cd 			AND 
//			 "AUTH_KEY"   	= :a_auth_key			;
//	IF sqlca.sqlcode = 0 THEN // 등록된 key가 없으면
//		RETURN TRUE
//	ELSE
//		RETURN FALSE
//	END IF
//End if
//
//// 여기서는 권한등급이 'D'인경우(Detail)에 대해 고유의 key를 가지고 온 경우이다.
//SELECT "AUTH_KEY"
//  INTO :ls_temp 
//  FROM "ICB_PGM_USER_SUB_DETAIL" 
// WHERE "PGM_CD" 		= :a_pgm_cd 			AND 
//       "USER_GRP_ID" = :ls_user_grp_dept 	AND 
//  	    "AUTH_KEY"   	= :a_auth_key			;
//IF sqlca.sqlcode = 100 THEN // 등록된 key가 없으면
//	RETURN FALSE
//ELSEIF sqlca.sqlcode <> 0 THEN
//	// DataBase Error.
////	MessageBox( 'f_security:9', sqlca.sqlerrtext )
//	RETURN FALSE
//END IF
//
//RETURN TRUE
//
end function

