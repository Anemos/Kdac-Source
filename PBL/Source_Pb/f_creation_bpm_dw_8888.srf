$PBExportHeader$f_creation_bpm_dw_8888.srf
$PBExportComments$bom 전개 ( DW ) -- 유상사급완성품만전개
global type f_creation_bpm_dw_8888 from function_object
end type

forward prototypes
global function integer f_creation_bpm_dw_8888 (string a_date)
end prototypes

global function integer f_creation_bpm_dw_8888 (string a_date);//string 		ls_firstmodel,ls_plant,ls_div,ls_explant,ls_exdiv,ls_pitno,ls_citno,ls_itno[50,500],ls_chkit,ls_serial[50,500],ls_serial1,ls_Srce
//string 		ls_edtm,ls_edte,ls_opcd,ls_wkct,ls_exdvsn[50,500],ls_dvsn[50,500],ls_expl[50,500],ls_xplant[50,500],& 
//       		ls_oscd,ls_level,ls_opt_itno,ls_option[50,500],ls_chg_model[50,500],ls_model[50,500],ls_model1,ls_chg_model1
//integer 		i,j,k,p,ln_cnt,ln_serial,ln_count,II,ln_retrieve_count,JJ,ln_bpm101_count
//decimal{3} 	ln_qty,ln_qtym[50,500],ln_qty1
//datastore 	ld_dw,ld_dw_bpm101
//
//ld_dw 						= create datastore
//ld_Dw.dataobject 			= 'd_bom_export_01'
//ld_Dw.settransobject(sqlca)
//ld_dw_bpm101 				= create datastore
//ld_dw_bpm101.dataobject = 'd_bpm101_8888'
//ld_dw_bpm101.settransobject(sqlca)
//// A_CHK = 'C' 로 테스트
//// A_CHK = 'A' --> 공장구분없이 전체전개(10/05,10/06 하위품번도 전개), 호환 주부품번 상관없이 전개,자재수불단위 무시
////       = 'B' --> 공장구분없이 전체전개(10/05,10/06 하위품번도 전개), 호환 주품번만 전개,자재 수불단위 무시
////       = 'C' --> 공장별 전개          (10/05,10/06 하위품번 미전개), 호환 주부품번 상관없이 전개,자재 수불단위 무시
////       = 'D' --> 공장별 전개          (10/05,10/06 하위품번 미전개), 호환 주품번만 전개,자재 수불단위 무시
////       = 'E' --> 공장구분없이 전체전개(10/05,10/06 하위품번도 전개), 호환 주부품번 상관없이 전개,자재수불단위 반영
////       = 'F' --> 공장구분없이 전체전개(10/05,10/06 하위품번도 전개), 호환 주품번만 전개,자재 수불단위 반영
////       = 'G' --> 공장별 전개          (10/05,10/06 하위품번 미전개), 호환 주부품번 상관없이 전개,자재 수불단위 반영
////       = 'H' --> 공장별 전개          (10/05,10/06 하위품번 미전개), 호환 주품번만 전개,자재 수불단위 반영
////       = 'I' --> 공장별 전개          (10/05,10/06 하위품번 미전개), 호환 주부품번 상관없이 싱글레벨만 전개,자재 수불단위 반영
//
//delete from pbbpm.bpm101t
//using sqlca ;
//
//ln_bpm101_count	=	ld_dw_bpm101.retrieve()
//for	JJ = 1	to	ln_bpm101_count
//	k 					= 	0 
//	p 					= 	0
//	ln_serial 		= 	0
//	ls_plant			=	ld_Dw.object.balcd[jj]	
//	ls_div			=	ld_Dw.object.bdiv[jj]	
//	ls_pitno			=	ld_Dw.object.bprno[jj]	
//					 
//	ln_retrieve_count = ld_dw.retrieve(ls_plant,ls_div,ls_pitno,a_date)
//	
//	for II = 1 to ln_retrieve_count
//		ls_plant   	=	ld_Dw.getitemstring(II,"plant")
//		ls_div     	= 	ld_Dw.getitemstring(II,"pdvsn")
//		ls_citno   	= 	ld_Dw.getitemstring(II,"pcitn")
//		ls_wkct    	= 	ld_Dw.getitemstring(II,"pwkct")
//		ln_qty     	= 	ld_Dw.getitemnumber(II,"pqtym")
//	
//		select srce into:ls_srce from pbinv.inv101
//			where comltd = :g_s_company and xplant = :ls_plant and div = :ls_div and itno = :ls_citno 
//		using sqlca ;
//		i = 1
//		k++
//		ln_serial++
//		ls_xplant[1,k] = trim(ls_plant)
//		ls_dvsn[1,k]   = trim(ls_div)
//		ls_itno[1,k]   = trim(ls_citno)
//		ln_qtym[1,k]   = ln_qty
//		ls_expl[1,k]   = trim(ls_explant)
//		ls_exdvsn[1,k] = trim(ls_exdiv)
//		ls_option[1,k] = ls_opcd
//		ls_model[1,k]  = ls_pitno
//		ls_serial[1,k] = string(ln_Serial,"000")
//		ls_serial1     = string(ln_Serial,"000")
//		ln_count++
//		INSERT INTO QTEMP.BOMTEMP VALUES (:G_S_COMPANY,:a_plant,:a_dvsn,:ls_pitno,
//						:ls_serial1,'1',:ls_pitno,:ls_citno,:ln_qty,:ln_qty,
//						:ls_wkct,:ls_edtm,:ls_edte,:ls_opcd,:ls_explant,:ls_exdiv,:ls_oscd,:ls_plant,:ls_div ) using sqlca ;
//	next
//		
//	///  First Step Finish
//	  
//	for i = 1 to 50
//	  for j = 1 to k
//			ls_pitno = ls_itno[i,j]
//			ls_plant = ls_xplant[i,j]
//			ls_div   = ls_dvsn[i,j]
//			select srce into:ls_srce from pbinv.inv101
//				where comltd = :g_s_company and xplant = :ls_xplant[i,j] and div = :ls_dvsn[i,j] and itno = :ls_pitno 
//			using sqlca ;
//			if a_chk = 'C' or a_chk = 'D' or a_chk = 'G' or a_chk = 'H' then
//				if ls_srce = '05' or ls_srce = '06' then
//					continue
//				end if
//			end if
//			if a_chk = 'E' or a_chk = 'F' or a_chk = 'G' or a_chk = 'H' or a_chk = 'I' then
//				if f_spacechk(ls_srce) <> -1 and ls_srce <> '03' then
//					continue
//				end if
//			end if		
//			if a_chk = 'I' and ls_option[i,j] <> '2' then
//				continue
//			end if
//			if ls_option[i,j] = '2' then
//				if trim(ls_chg_model[i,j]) = 'Y' then
//					ls_model1 = ls_pitno
//				elseif trim(ls_chg_model[i,j]) <> 'Y' then
//					ls_model1 = ls_model[i,j]
//				end if
//			else
//				ls_model1 = ls_firstmodel
//			end if
//			ln_serial = 0
//			if a_chk = 'C' or a_chk = 'D' or a_chk = 'G' or a_chk = 'H' then
//			else
//				if ls_srce 	= '05' 	or 	ls_srce 	= 	'06' then
//					ls_plant	= 	ls_expl[i,j]
//					ls_div	=	ls_exdvsn[i,j]
//				end if
//			end if
//			ln_retrieve_count = ld_dw.retrieve(ls_plant,ls_div,ls_pitno,a_date)
//			for II = 1 to ln_retrieve_count
//				ls_plant   = ld_Dw.getitemstring(II,"plant")
//				ls_div     = ld_Dw.getitemstring(II,"pdvsn")
//				ls_citno   = ld_Dw.getitemstring(II,"pcitn")
//				ls_wkct    = ld_Dw.getitemstring(II,"pwkct")
//				ls_oscd    = ld_Dw.getitemstring(II,"poscd")
//				ls_edtm    = ld_Dw.getitemstring(II,"pedtm")
//				ls_edte    = ld_Dw.getitemstring(II,"pedte")
//				ln_qty     = ld_Dw.getitemnumber(II,"pqtym")
//				ls_explant = ld_Dw.getitemstring(II,"pexplant")
//				ls_exdiv   = ld_Dw.getitemstring(II,"pexdv")
//	
//				select srce into:ls_srce from pbinv.inv101
//					where comltd = :g_s_company and xplant = :ls_plant and div = :ls_div and itno = :ls_citno 
//				using sqlca ;
//				
//				ls_opt_itno = trim(f_option_chk_after(ls_plant,ls_div,ls_citno,a_date))
//				if ls_opt_itno <> '' and trim(ls_opt_itno) <> trim(ls_citno) then
//					ls_chg_model1 = 'Y'
//					ls_opcd       = '2'
//				else
//					ls_chg_model1 = 'N'
//				end if
//				if ls_option[i,j] = '2' then
//					ls_chg_model1	= 'N'
//					ls_opcd 			= '2'
//				elseif trim(ls_opt_itno) = trim(ls_citno) then
//					ls_opcd = '1'
//				elseif f_spacechk(ls_opt_itno) = -1 then
//					ls_opcd = ' '
//				end if			
//	
//				if a_chk = 'B' or a_chk = 'D' or a_chk = 'F' or a_chk = 'H' then
//					if ls_opcd = '2' then
//						continue
//					end if
//				end if
//				
//				if a_chk = 'C' or a_chk = 'D' or a_chk = 'G' or a_chk = 'H' then
//				else
//					if ls_srce 	= '05' or ls_srce 	= 	'06' then
//						ls_plant	= 	ls_explant
//						ls_div 	=	ls_exdiv
//					end if
//				end if
//				p++ 
//				ln_serial++
//				ls_xplant[i+1,p] 		= trim(ls_plant)
//				ls_expl[i+1,p]   		= trim(ls_explant)
//				ls_dvsn[i+1,p]   		= trim(ls_div)
//				ls_exdvsn[i+1,p] 		= trim(ls_exdiv)
//				ls_model[i+1,p]  		= ls_model1
//				ls_chg_model[i+1,p] 	= ls_chg_model1
//				ls_option[i+1,p] 		= ls_opcd
//				ls_itno[i+1,p]   		= trim(ls_citno)
//				ln_qtym[i+1,p]   		= ln_qty * ln_qtym[i,j]
//				ln_qty1          		= ln_qty * ln_qtym[i,j]
//				ls_serial[i+1,p] 		= ls_serial[i,j] + string(ln_Serial,"000")
//				ls_serial1       		= ls_serial[i,j] + string(ln_Serial,"000")
//				ls_level         		= string(i+1)
//				ln_count++
//				INSERT INTO QTEMP.BOMTEMP 
//				VALUES (	:G_S_COMPANY,:a_plant,:a_dvsn,:ls_firstmodel,:ls_serial1,:ls_level, 
//						  	:ls_pitno,:ls_citno,:ln_qty,:ln_qty1,:ls_wkct,:ls_edtm,:ls_edte,:ls_opcd,:ls_explant,:ls_exdiv,:ls_oscd,
//						  	:ls_plant,:ls_div ) 
//				using sqlca;
//			next
//	  next 
//	  if p = 0 then
//		  exit	
//	  end if
//	  k = p
//	  p = 0
//	next
//next 
return 	0
end function

