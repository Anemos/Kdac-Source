$PBExportHeader$f_find_control.srf
$PBExportComments$윈도내의 특정 control을 찾는다.
global type f_find_control from function_object
end type

forward prototypes
global function boolean f_find_control (window aw_parent, string as_classname, ref windowobject awo_control)
end prototypes

global function boolean f_find_control (window aw_parent, string as_classname, ref windowobject awo_control);///////////////////////////////////////////////////////////////////////////////
//
//    Function: f_find_control
//
//     Purpose: 윈도내의 특정 control을 찾는다.
//
//   Arguments:  
//              aw_parent				대상 window
//	             as_classname 			찾을 control name
//				    awo_control 			찾은 windowobject control
//
//     Returns:  [boolean]
//               TRUE 		찾음
//               FALSE		찾지 못함
//
// Log : 
//
//   DATE         WHO        WHAT
//  --------     -----      -------------------------------------------
//   1997-06-09	dmshin		작성
//
///////////////////////////////////////////////////////////////////////////////
INTEGER			li_control_num						//대상window안의 control수
INTEGER			li_tabpage_num						//tab control인 경우 tabpage의 수
INTEGER			li_control_num_of_a_tabpage	//tabpage안의 control수
INTEGER			li_control_num_of_a_uo			//UserObject안의 control수
INTEGER			li_i									//For-Next를 위한 temp var.
INTEGER			li_j									//For-Next를 위한 temp var.
INTEGER			li_k									//For-Next를 위한 temp var.
STRING			ls_classname						//control의 name
TAB				ltab_control[]						//tab control
INTEGER			li_tab_control_num = 0			//tab control number
USEROBJECT		luo_tabpage							//tab control안의 하나의 tabpage
USEROBJECT		luo_control[]						//User Object
INTEGER			li_uo_control_num = 0			//User Object Number

IF IsValid(aw_parent) THEN
	//윈도가 있으면
	li_control_num = UpperBound( aw_parent.control )
	FOR li_i = 1 TO li_control_num
		ls_classname = aw_parent.control[li_i].classname()
		IF ls_classname = as_classname THEN
			//찾았다
			awo_control = aw_parent.control[li_i]
			RETURN TRUE
		ELSEIF aw_parent.control[li_i].TypeOf() = Tab! THEN
			//Tab Control인 경우
			//나중에 찾기위해 우선 저장
			li_tab_control_num ++
			ltab_control[li_tab_control_num] = aw_parent.control[li_i]
		ELSEIF aw_parent.control[li_i].TypeOf() = UserObject! THEN
			//UserObject Control인 경우
			//나중에 찾기위해 우선 저장
			li_uo_control_num ++
			luo_control[li_uo_control_num] = aw_parent.control[li_i]			
		END IF
	NEXT
	
	//TAB Control에 대한 찾기
	FOR li_i = 1 TO li_tab_control_num
		//Tab Control인경우는 해당 Tab안의 Tabpage안의 내용도 참조
		//Tabpage의 갯수를 구한다
		li_tabpage_num = UpperBound(ltab_control[li_i].Control[])
		FOR li_j = 1 TO li_tabpage_num
			//하나의 TabPage에 대해서 조사
			luo_tabpage = ltab_control[li_i].Control[li_j]
			//tabpage안의 control갯수를 구함
			li_control_num_of_a_tabpage = UpperBound(luo_tabpage.Control[])
			FOR li_k = 1 TO li_control_num_of_a_tabpage
				//control name을 구해 비교
				ls_classname = luo_tabpage.control[li_k].ClassName()
				IF ls_classname = as_classname THEN
					//찾았다
					awo_control = luo_tabpage.control[li_k]
					RETURN TRUE
				END IF
			NEXT
		NEXT			
	NEXT
	
	//UserObject Control에 대한 찾기
	FOR li_i = 1 TO li_uo_control_num
		//user Object안의 control갯수를 구함
		li_control_num_of_a_uo = UpperBound(luo_control[li_i].Control[])
		FOR li_j = 1 TO li_control_num_of_a_uo
			//control name을 구해 비교
			ls_classname = luo_control[li_i].control[li_j].ClassName()
			IF ls_classname = as_classname THEN
				//찾았다
				awo_control = luo_control[li_i].control[li_j]
				RETURN TRUE
			END IF
		NEXT
	NEXT	
END IF

RETURN FALSE
end function

