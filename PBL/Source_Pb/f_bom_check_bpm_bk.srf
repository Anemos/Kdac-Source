$PBExportHeader$f_bom_check_bpm_bk.srf
$PBExportComments$MBOM에서 상위품번을 체크하는 함수
global type f_bom_check_bpm_bk from function_object
end type

forward prototypes
global function string f_bom_check_bpm_bk (string a_year, string a_revno, string a_plant, string a_div, string a_itno, string a_sitno, string a_oedtm, string a_oedte)
end prototypes

global function string f_bom_check_bpm_bk (string a_year, string a_revno, string a_plant, string a_div, string a_itno, string a_sitno, string a_oedtm, string a_oedte);string 	ls_div,ls_oitno[],ls_itno,ls_citno,ls_pitno,ls_chkitno[50,500], &
		 	ls_oedte[],ls_dte,ls_chkdte[50,500],ls_oedtm[],ls_dtm,ls_chkdtm[50,500], &
		 	ls_from,ls_to,ls_chkitno1[50,500]
integer 	i = 0,j = 0,k = 0,ln_chk = 0,ln_no = 1,count_chk[]

ls_itno = trim(a_itno)
ls_div  = trim(a_div)
if f_spacechk(a_oedtm) = -1 then
	a_oedtm = g_s_date
end if


ls_oitno[1] = trim(a_itno)
ls_oitno[2] = trim(a_sitno)
ls_oedte[2] = a_oedte
ls_oedtm[2] = a_oedtm
DECLARE bomchk_cur CURSOR FOR 
	SELECT 	"PBBPM"."BPM504"."PPITN","PBBPM"."BPM504"."PEDTM","PBBPM"."BPM504"."PEDTE" FROM "PBBPM"."BPM504"
		WHERE	"PBBPM"."BPM504"."PCITN" = :ls_pitno   and "PBBPM"."BPM504"."XYEAR" = :a_year   and "PBBPM"."BPM504"."REVNO" = :a_revno   and
			   "PBBPM"."BPM504"."PLANT" = :a_plant 	and "PBBPM"."BPM504"."PDVSN" = :ls_div 		and
		   ((	trim("PBBPM"."BPM504"."PEDTE") =  ''  	and "PBBPM"."BPM504"."PEDTM" <= :a_oedtm ) 	or  
			(  trim("PBBPM"."BPM504"."PEDTE") <> ''  	and "PBBPM"."BPM504"."PEDTM" <= :a_oedtm  	and "PBBPM"."BPM504"."PEDTE" >= :a_oedtm ))
	order by 1,2,3
using SQLCA ;
for j = 1 to 2
	ls_pitno = ls_oitno[j]
	k = 0
	open bomchk_cur ;  
		do while true
			fetch bomchk_cur into :ls_citno,:ls_dtm,:ls_dte ;
			if sqlca.sqlcode <> 0 then
				exit
			end if 
			k = k + 1
			ls_chkitno[j,k] = trim(ls_citno)
			ls_chkdte[j,k]  = trim(ls_dte)
			ls_chkdtm[j,k]  = trim(ls_dtm)
	  loop
   close bomchk_cur ;
	count_chk[j] = k
next

if count_chk[1] <> count_chk[2] then
	return 	'i' + ls_chkitno[2,k]
end if
for k = 1 to count_chk[1]
	if isnull(ls_chkitno[1,k]) = true and isnull(ls_chkitno[2,k]) = true then
		exit
	end if
	if ls_chkitno[1,k] <> ls_chkitno[2,k] then
		return 	'i' + ls_chkitno[2,k]
	end if
next
//가장 늦은 적용일 찾기
ls_from = ls_chkdtm[1,1]
for j = 1 to 2	
	for k = 1 to count_chk[j]
		if f_spacechk(ls_chkdtm[j,k]) = -1 then
		else
			if ls_chkdtm[j,k] >= ls_from then
				ls_from = ls_chkdtm[j,k]
			end if
		end if
	next
next
//가장 빠른 완료일 찾기
ls_to = ls_chkdte[1,1]
for j = 1 to 2
	for k = 1 to count_chk[j]
		if f_spacechk(ls_chkdte[j,k]) = -1 then
		else
			if ls_chkdte[j,k] <= ls_to then
				ls_to = ls_chkdte[j,k]
			end if
		end if
	next
next

if ls_from = "" then
	if ls_to = "" then
	else
		if ls_oedte[2] <= ls_to then
		else
			return 	"d" + "to:" + ls_to
		end if
	end if
else
	if ls_to = "" then
		if ls_oedtm[2] >= ls_from then
		else
			return "d" + "from:" + ls_from
		end if
	else
		if ls_oedte[2] <= ls_to and ls_oedtm[2] >= ls_from then
		else
			return 	"d" + "from:" + ls_from + "to:" + ls_to
		end if
	end if
end if
return 	""
 
end function

